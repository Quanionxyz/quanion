{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@quais/properties\";\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\", \"externalGasLimit\", \"externalGasPrice\", \"externalGasTip\", \"externalAccessList\", \"externalData\"];\nconst forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport class Signer {\n  ///////////////////\n  // Sub-classes MUST call super\n  constructor() {\n    logger.checkAbstract(new.target, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  }\n  ///////////////////\n  // Sub-classes MAY override these\n  getBalance(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getBalance\");\n      return yield this.provider.getBalance(this.getAddress(), blockTag);\n    });\n  }\n  getTransactionCount(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getTransactionCount\");\n      return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n    });\n  }\n  // Populates \"from\" if unspecified, and estimates the gas for the transaction\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"estimateGas\");\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.estimateGas(tx);\n    });\n  }\n  // Populates \"from\" if unspecified, and calls with the transaction\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"call\");\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.call(tx, blockTag);\n    });\n  }\n  // Populates all fields in a transaction, signs it and sends it to the network\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"sendTransaction\");\n      const tx = yield this.populateTransaction(transaction);\n      const signedTx = yield this.signTransaction(tx);\n      return yield this.provider.sendTransaction(signedTx);\n    });\n  }\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getChainId\");\n      const network = yield this.provider.getNetwork();\n      return network.chainId;\n    });\n  }\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getGasPrice\");\n      return yield this.provider.getGasPrice();\n    });\n  }\n  getMaxPriorityFeePerGas() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getMaxPriorityFeePerGas\");\n      return yield this.provider.getMaxPriorityFeePerGas();\n    });\n  }\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getFeeData\");\n      return yield this.provider.getFeeData();\n    });\n  }\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"resolveName\");\n      return yield this.provider.resolveName(name);\n    });\n  }\n  // Checks a transaction does not contain invalid keys and if\n  // no \"from\" is provided, populates it.\n  // - does NOT require a provider\n  // - adds \"from\" is not present\n  // - returns a COPY (safe to mutate the result)\n  // By default called from: (overriding these prevents it)\n  //   - call\n  //   - estimateGas\n  //   - populateTransaction (and therefor sendTransaction)\n  checkTransaction(transaction) {\n    for (const key in transaction) {\n      if (allowedTransactionKeys.indexOf(key) === -1) {\n        logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n      }\n    }\n    const tx = shallowCopy(transaction);\n    if (tx.from == null) {\n      tx.from = this.getAddress();\n    } else {\n      // Make sure any provided address matches this signer\n      tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(result => {\n        if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n        return result[0];\n      });\n    }\n    return tx;\n  }\n  // Populates ALL keys for a transaction and checks that \"from\" matches\n  // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n  // By default called from: (overriding these prevents it)\n  //   - sendTransaction\n  //\n  // Notes:\n  //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n  populateTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      if (tx.to != null) {\n        tx.to = Promise.resolve(tx.to).then(to => __awaiter(this, void 0, void 0, function* () {\n          if (to == null) {\n            return null;\n          }\n          const address = yield this.resolveName(to);\n          if (address == null) {\n            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n          }\n          return address;\n        }));\n        // Prevent this error from causing an UnhandledPromiseException\n        tx.to.catch(error => {});\n      }\n      const hasExternal = tx.externalGasLimit != null || tx.externalGasPrice != null || tx.externalGasTip != null || tx.externalData != null || tx.externalAccessList != null;\n      if ((tx.type === 0 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null && !hasExternal) {\n        // Fully-formed standard transaction (skip getFeeData), no external data.\n        tx.type = 0;\n      } else {\n        // We need to get fee data to determine things\n        const feeData = yield this.getFeeData();\n        if (tx.type == null) {\n          // We need to auto-detect the intended type of this transaction...\n          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n            // The network supports EIP-1559!\n            // Upgrade transaction from null to standard\n            if (!hasExternal) {\n              tx.type = 0;\n            } else {\n              tx.type = 2;\n              // Populate missing fee data, assume the receiving context is operating in similar \n              if (tx.externalGasLimit == null || tx.externalGasPrice == null || tx.externalGasTip == null) {\n                // Missing external fields\n                logger.throwError(\"attempting to send an external transaction without all necessary data fields\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"populateTransaction\"\n                });\n              }\n            }\n            // Populate missing fee data\n            if (tx.maxFeePerGas == null) {\n              tx.maxFeePerGas = feeData.maxFeePerGas;\n            }\n            if (tx.maxPriorityFeePerGas == null) {\n              tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n            }\n          } else if (feeData.gasPrice != null) {\n            // Network doesn't support EIP-1559...\n            logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"populateTransaction\"\n            });\n          } else {\n            // getFeeData has failed us.\n            logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"signer.getFeeData\"\n            });\n          }\n        }\n      }\n      if (tx.nonce == null) {\n        tx.nonce = this.getTransactionCount(\"pending\");\n      }\n      if (tx.gasLimit == null) {\n        tx.gasLimit = this.estimateGas(tx).catch(error => {\n          if (forwardErrors.indexOf(error.code) >= 0) {\n            throw error;\n          }\n          return logger.throwError(\"abstract-signer: cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error: error,\n            tx: tx\n          });\n        });\n      }\n      if (tx.chainId == null) {\n        tx.chainId = this.getChainId();\n      } else {\n        tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {\n          if (results[1] !== 0 && results[0] !== results[1]) {\n            logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n          }\n          return results[0];\n        });\n      }\n      return yield resolveProperties(tx);\n    });\n  }\n  ///////////////////\n  // Sub-classes SHOULD leave these alone\n  _checkProvider(operation) {\n    if (!this.provider) {\n      logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation || \"_checkProvider\"\n      });\n    }\n  }\n  static isSigner(value) {\n    return !!(value && value._isSigner);\n  }\n}\nexport class VoidSigner extends Signer {\n  constructor(address, provider) {\n    super();\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n  _fail(message, operation) {\n    return Promise.resolve().then(() => {\n      logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation\n      });\n    });\n  }\n  signMessage(message) {\n    return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n  }\n  signTransaction(transaction) {\n    return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n  }\n  _signTypedData(domain, types, value) {\n    return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n  }\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n}","map":{"version":3,"names":["defineReadOnly","resolveProperties","shallowCopy","Logger","version","logger","allowedTransactionKeys","forwardErrors","errors","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","Signer","constructor","checkAbstract","new","target","getBalance","blockTag","_checkProvider","provider","getAddress","getTransactionCount","estimateGas","transaction","tx","checkTransaction","call","sendTransaction","populateTransaction","signedTx","signTransaction","getChainId","network","getNetwork","chainId","getGasPrice","getMaxPriorityFeePerGas","getFeeData","resolveName","name","key","indexOf","throwArgumentError","from","Promise","all","resolve","then","result","toLowerCase","to","__awaiter","address","catch","error","hasExternal","externalGasLimit","externalGasPrice","externalGasTip","externalData","externalAccessList","type","maxFeePerGas","maxPriorityFeePerGas","feeData","throwError","UNSUPPORTED_OPERATION","operation","gasPrice","nonce","gasLimit","code","UNPREDICTABLE_GAS_LIMIT","results","isSigner","value","_isSigner","VoidSigner","_fail","message","signMessage","_signTypedData","domain","types","connect"],"sources":["/workspace/quanion/node_modules/@quais/abstract-signer/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, FeeData, Provider, TransactionRequest, TransactionResponse } from \"@quais/abstract-provider\";\nimport { BigNumber, BigNumberish } from \"@quais/bignumber\";\nimport { Bytes, BytesLike } from \"@quais/bytes\";\nimport { Deferrable, defineReadOnly, resolveProperties, shallowCopy } from \"@quais/properties\";\n\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst allowedTransactionKeys: Array<string> = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\", \"externalGasLimit\", \"externalGasPrice\", \"externalGasTip\", \"externalAccessList\", \"externalData\"\n];\n\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n\n// EIP-712 Typed Data\n// See: https://eips.ethereum.org/EIPS/eip-712\n\nexport interface TypedDataDomain {\n    name?: string;\n    version?: string;\n    chainId?: BigNumberish;\n    verifyingContract?: string;\n    salt?: BytesLike;\n};\n\nexport interface TypedDataField {\n    name: string;\n    type: string;\n};\n\n// Sub-classes of Signer may optionally extend this interface to indicate\n// they have a private key available synchronously\nexport interface ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n}\n\n// Sub-Class Notes:\n//  - A Signer MUST always make sure, that if present, the \"from\" field\n//    matches the Signer, before sending or signing a transaction\n//  - A Signer SHOULD always wrap private information (such as a private\n//    key or mnemonic) in a function, so that console.log does not leak\n//    the data\n\n// @TODO: This is a temporary measure to preserve backwards compatibility\n//        In v6, the method on TypedDataSigner will be added to Signer\nexport interface TypedDataSigner {\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\nexport abstract class Signer {\n    readonly provider?: Provider;\n\n    ///////////////////\n    // Sub-classes MUST implement these\n\n    // Returns the checksum address\n    abstract getAddress(): Promise<string>\n\n    // Returns the signed prefixed-message. This MUST treat:\n    // - Bytes as a binary message\n    // - string as a UTF8-message\n    // i.e. \"0x1234\" is a SIX (6) byte string, NOT 2 bytes of data\n    abstract signMessage(message: Bytes | string): Promise<string>;\n\n    // Signs a transaction and returns the fully serialized, signed transaction.\n    // The EXACT transaction MUST be signed, and NO additional properties to be added.\n    // - This MAY throw if signing transactions is not supports, but if\n    //   it does, sentTransaction MUST be overridden.\n    abstract signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;\n\n    // Returns a new instance of the Signer, connected to provider.\n    // This MAY throw if changing providers is not supported.\n    abstract connect(provider: Provider): Signer;\n\n    readonly _isSigner: boolean;\n\n\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n\n\n    ///////////////////\n    // Sub-classes MAY override these\n\n    async getBalance(blockTag?: BlockTag): Promise<BigNumber> {\n        this._checkProvider(\"getBalance\");\n        return await this.provider.getBalance(this.getAddress(), blockTag);\n    }\n\n    async getTransactionCount(blockTag?: BlockTag): Promise<number> {\n        this._checkProvider(\"getTransactionCount\");\n        return await this.provider.getTransactionCount(this.getAddress(), blockTag);\n    }\n\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        this._checkProvider(\"estimateGas\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.estimateGas(tx);\n    }\n\n    // Populates \"from\" if unspecified, and calls with the transaction\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag): Promise<string> {\n        this._checkProvider(\"call\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.call(tx, blockTag);\n    }\n\n    // Populates all fields in a transaction, signs it and sends it to the network\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        this._checkProvider(\"sendTransaction\");\n        const tx = await this.populateTransaction(transaction);\n        const signedTx = await this.signTransaction(tx);\n        return await this.provider.sendTransaction(signedTx);\n    }\n\n    async getChainId(): Promise<number> {\n        this._checkProvider(\"getChainId\");\n        const network = await this.provider.getNetwork();\n        return network.chainId;\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        this._checkProvider(\"getGasPrice\");\n        return await this.provider.getGasPrice();\n    }\n\n    async getMaxPriorityFeePerGas(): Promise<BigNumber> {\n        this._checkProvider(\"getMaxPriorityFeePerGas\");\n        return await this.provider.getMaxPriorityFeePerGas();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        this._checkProvider(\"getFeeData\");\n        return await this.provider.getFeeData();\n    }\n\n\n    async resolveName(name: string): Promise<string> {\n        this._checkProvider(\"resolveName\");\n        return await this.provider.resolveName(name);\n    }\n\n\n\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction: Deferrable<TransactionRequest>): Deferrable<TransactionRequest> {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n\n        const tx = shallowCopy(transaction);\n\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n\n        } else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n\n        return tx;\n    }\n\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    async populateTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionRequest> {\n\n        const tx: Deferrable<TransactionRequest> = await resolveProperties(this.checkTransaction(transaction))\n\n        if (tx.to != null) {\n            tx.to = Promise.resolve(tx.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n\n            // Prevent this error from causing an UnhandledPromiseException\n            tx.to.catch((error) => {  });\n        }\n\n        const hasExternal = (tx.externalGasLimit != null || tx.externalGasPrice != null || tx.externalGasTip != null || tx.externalData != null || tx.externalAccessList != null)\n\n        if ((tx.type === 0 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) && !hasExternal) {\n            // Fully-formed standard transaction (skip getFeeData), no external data.\n            tx.type = 0;\n        } else {\n            // We need to get fee data to determine things\n            const feeData = await this.getFeeData();\n\n            if (tx.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to standard\n                    if(!hasExternal){\n                        tx.type = 0;\n                    } else {\n                        tx.type = 2;\n                        // Populate missing fee data, assume the receiving context is operating in similar \n                        if(tx.externalGasLimit == null || tx.externalGasPrice == null || tx.externalGasTip == null){\n                            // Missing external fields\n                            logger.throwError(\"attempting to send an external transaction without all necessary data fields\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                    }\n\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                    if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"populateTransaction\"\n                    });\n                } else {\n                    // getFeeData has failed us.\n                    logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n\n            }\n        }\n\n        \n\n        if (tx.nonce == null) { tx.nonce = this.getTransactionCount(\"pending\"); }\n\n        if (tx.gasLimit == null) {\n            tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                if (forwardErrors.indexOf(error.code) >= 0) {\n                    throw error;\n                }\n                return logger.throwError(\"abstract-signer: cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                    error: error,\n                    tx: tx\n                });\n            });\n        }\n\n        if (tx.chainId == null) {\n            tx.chainId = this.getChainId();\n        } else {\n            tx.chainId = Promise.all([\n                Promise.resolve(tx.chainId),\n                this.getChainId()\n            ]).then((results) => {\n                if (results[1] !== 0 && results[0] !== results[1]) {\n                    logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                }\n                return results[0];\n            });\n        }\n\n        return await resolveProperties(tx);\n    }\n\n\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n\n    _checkProvider(operation?: string): void {\n        if (!this.provider) { logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: (operation || \"_checkProvider\") });\n        }\n    }\n\n    static isSigner(value: any): value is Signer {\n        return !!(value && value._isSigner);\n    }\n}\n\nexport class VoidSigner extends Signer implements TypedDataSigner {\n    readonly address: string;\n\n    constructor(address: string, provider?: Provider) {\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    _fail(message: string, operation: string): Promise<any> {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n\n    signMessage(message: Bytes | string): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n\n    connect(provider: Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}