{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.table = void 0;\nconst alignTableData_1 = require(\"./alignTableData\");\nconst calculateOutputColumnWidths_1 = require(\"./calculateOutputColumnWidths\");\nconst calculateRowHeights_1 = require(\"./calculateRowHeights\");\nconst drawTable_1 = require(\"./drawTable\");\nconst injectHeaderConfig_1 = require(\"./injectHeaderConfig\");\nconst makeTableConfig_1 = require(\"./makeTableConfig\");\nconst mapDataUsingRowHeights_1 = require(\"./mapDataUsingRowHeights\");\nconst padTableData_1 = require(\"./padTableData\");\nconst stringifyTableData_1 = require(\"./stringifyTableData\");\nconst truncateTableData_1 = require(\"./truncateTableData\");\nconst utils_1 = require(\"./utils\");\nconst validateTableData_1 = require(\"./validateTableData\");\nconst table = (data, userConfig = {}) => {\n  (0, validateTableData_1.validateTableData)(data);\n  let rows = (0, stringifyTableData_1.stringifyTableData)(data);\n  const [injectedRows, injectedSpanningCellConfig] = (0, injectHeaderConfig_1.injectHeaderConfig)(rows, userConfig);\n  const config = (0, makeTableConfig_1.makeTableConfig)(injectedRows, userConfig, injectedSpanningCellConfig);\n  rows = (0, truncateTableData_1.truncateTableData)(injectedRows, (0, utils_1.extractTruncates)(config));\n  const rowHeights = (0, calculateRowHeights_1.calculateRowHeights)(rows, config);\n  config.spanningCellManager.setRowHeights(rowHeights);\n  config.spanningCellManager.setRowIndexMapping(rowHeights);\n  rows = (0, mapDataUsingRowHeights_1.mapDataUsingRowHeights)(rows, rowHeights, config);\n  rows = (0, alignTableData_1.alignTableData)(rows, config);\n  rows = (0, padTableData_1.padTableData)(rows, config);\n  const outputColumnWidths = (0, calculateOutputColumnWidths_1.calculateOutputColumnWidths)(config);\n  return (0, drawTable_1.drawTable)(rows, outputColumnWidths, rowHeights, config);\n};\nexports.table = table;","map":{"version":3,"names":["alignTableData_1","require","calculateOutputColumnWidths_1","calculateRowHeights_1","drawTable_1","injectHeaderConfig_1","makeTableConfig_1","mapDataUsingRowHeights_1","padTableData_1","stringifyTableData_1","truncateTableData_1","utils_1","validateTableData_1","table","data","userConfig","validateTableData","rows","stringifyTableData","injectedRows","injectedSpanningCellConfig","injectHeaderConfig","config","makeTableConfig","truncateTableData","extractTruncates","rowHeights","calculateRowHeights","spanningCellManager","setRowHeights","setRowIndexMapping","mapDataUsingRowHeights","alignTableData","padTableData","outputColumnWidths","calculateOutputColumnWidths","drawTable","exports"],"sources":["../../src/table.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,gBAAA,GAAAC,OAAA;AAGA,MAAAC,6BAAA,GAAAD,OAAA;AAGA,MAAAE,qBAAA,GAAAF,OAAA;AAGA,MAAAG,WAAA,GAAAH,OAAA;AAGA,MAAAI,oBAAA,GAAAJ,OAAA;AAGA,MAAAK,iBAAA,GAAAL,OAAA;AAGA,MAAAM,wBAAA,GAAAN,OAAA;AAGA,MAAAO,cAAA,GAAAP,OAAA;AAGA,MAAAQ,oBAAA,GAAAR,OAAA;AAGA,MAAAS,mBAAA,GAAAT,OAAA;AAMA,MAAAU,OAAA,GAAAV,OAAA;AAGA,MAAAW,mBAAA,GAAAX,OAAA;AAIO,MAAMY,KAAK,GAAGA,CAACC,IAAiB,EAAEC,UAAA,GAA8B,EAAE,KAAY;EACnF,IAAAH,mBAAA,CAAAI,iBAAiB,EAACF,IAAI,CAAC;EAEvB,IAAIG,IAAI,GAAG,IAAAR,oBAAA,CAAAS,kBAAkB,EAACJ,IAAI,CAAC;EAEnC,MAAM,CAACK,YAAY,EAAEC,0BAA0B,CAAC,GAAG,IAAAf,oBAAA,CAAAgB,kBAAkB,EAACJ,IAAI,EAAEF,UAAU,CAAC;EAEvF,MAAMO,MAAM,GAAG,IAAAhB,iBAAA,CAAAiB,eAAe,EAACJ,YAAY,EAAEJ,UAAU,EAAEK,0BAA0B,CAAC;EAEpFH,IAAI,GAAG,IAAAP,mBAAA,CAAAc,iBAAiB,EAACL,YAAY,EAAE,IAAAR,OAAA,CAAAc,gBAAgB,EAACH,MAAM,CAAC,CAAC;EAEhE,MAAMI,UAAU,GAAG,IAAAvB,qBAAA,CAAAwB,mBAAmB,EAACV,IAAI,EAAEK,MAAM,CAAC;EAEpDA,MAAM,CAACM,mBAAmB,CAACC,aAAa,CAACH,UAAU,CAAC;EACpDJ,MAAM,CAACM,mBAAmB,CAACE,kBAAkB,CAACJ,UAAU,CAAC;EAEzDT,IAAI,GAAG,IAAAV,wBAAA,CAAAwB,sBAAsB,EAACd,IAAI,EAAES,UAAU,EAAEJ,MAAM,CAAC;EACvDL,IAAI,GAAG,IAAAjB,gBAAA,CAAAgC,cAAc,EAACf,IAAI,EAAEK,MAAM,CAAC;EACnCL,IAAI,GAAG,IAAAT,cAAA,CAAAyB,YAAY,EAAChB,IAAI,EAAEK,MAAM,CAAC;EAEjC,MAAMY,kBAAkB,GAAG,IAAAhC,6BAAA,CAAAiC,2BAA2B,EAACb,MAAM,CAAC;EAE9D,OAAO,IAAAlB,WAAA,CAAAgC,SAAS,EAACnB,IAAI,EAAEiB,kBAAkB,EAAER,UAAU,EAAEJ,MAAM,CAAC;AAChE,CAAC;AAvBYe,OAAA,CAAAxB,KAAK,GAAAA,KAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}