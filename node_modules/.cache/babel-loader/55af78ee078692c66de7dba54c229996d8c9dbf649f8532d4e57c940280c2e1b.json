{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateMaximumColumnWidths = exports.calculateMaximumCellWidth = void 0;\nconst string_width_1 = __importDefault(require(\"string-width\"));\nconst utils_1 = require(\"./utils\");\nconst calculateMaximumCellWidth = cell => {\n  return Math.max(...cell.split('\\n').map(string_width_1.default));\n};\nexports.calculateMaximumCellWidth = calculateMaximumCellWidth;\n/**\n * Produces an array of values that describe the largest value length (width) in every column.\n */\nconst calculateMaximumColumnWidths = (rows, spanningCellConfigs = []) => {\n  const columnWidths = new Array(rows[0].length).fill(0);\n  const rangeCoordinates = spanningCellConfigs.map(utils_1.calculateRangeCoordinate);\n  const isSpanningCell = (rowIndex, columnIndex) => {\n    return rangeCoordinates.some(rangeCoordinate => {\n      return (0, utils_1.isCellInRange)({\n        col: columnIndex,\n        row: rowIndex\n      }, rangeCoordinate);\n    });\n  };\n  rows.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      if (isSpanningCell(rowIndex, cellIndex)) {\n        return;\n      }\n      columnWidths[cellIndex] = Math.max(columnWidths[cellIndex], (0, exports.calculateMaximumCellWidth)(cell));\n    });\n  });\n  return columnWidths;\n};\nexports.calculateMaximumColumnWidths = calculateMaximumColumnWidths;","map":{"version":3,"names":["string_width_1","__importDefault","require","utils_1","calculateMaximumCellWidth","cell","Math","max","split","map","default","exports","calculateMaximumColumnWidths","rows","spanningCellConfigs","columnWidths","Array","length","fill","rangeCoordinates","calculateRangeCoordinate","isSpanningCell","rowIndex","columnIndex","some","rangeCoordinate","isCellInRange","col","row","forEach","cellIndex"],"sources":["../../src/calculateMaximumColumnWidths.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA,MAAAA,cAAA,GAAAC,eAAA,CAAAC,OAAA;AAQA,MAAAC,OAAA,GAAAD,OAAA;AAIO,MAAME,yBAAyB,GAAIC,IAAU,IAAY;EAC9D,OAAOC,IAAI,CAACC,GAAG,CACb,GAAGF,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACT,cAAA,CAAAU,OAAW,CAAC,CACrC;AACH,CAAC;AAJYC,OAAA,CAAAP,yBAAyB,GAAAA,yBAAA;AAMtC;;;AAGO,MAAMQ,4BAA4B,GAAGA,CAACC,IAAW,EAAEC,mBAAA,GAA4C,EAAE,KAAc;EACpH,MAAMC,YAAY,GAAG,IAAIC,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC,CAACI,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAMC,gBAAgB,GAAGL,mBAAmB,CAACL,GAAG,CAACN,OAAA,CAAAiB,wBAAwB,CAAC;EAC1E,MAAMC,cAAc,GAAGA,CAACC,QAAgB,EAAEC,WAAmB,KAAa;IACxE,OAAOJ,gBAAgB,CAACK,IAAI,CAAEC,eAAe,IAAI;MAC/C,OAAO,IAAAtB,OAAA,CAAAuB,aAAa,EAAC;QAACC,GAAG,EAAEJ,WAAW;QACpCK,GAAG,EAAEN;MAAQ,CAAC,EAAEG,eAAe,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC;EAEDZ,IAAI,CAACgB,OAAO,CAAC,CAACD,GAAG,EAAEN,QAAQ,KAAI;IAC7BM,GAAG,CAACC,OAAO,CAAC,CAACxB,IAAI,EAAEyB,SAAS,KAAI;MAC9B,IAAIT,cAAc,CAACC,QAAQ,EAAEQ,SAAS,CAAC,EAAE;QACvC;;MAEFf,YAAY,CAACe,SAAS,CAAC,GAAGxB,IAAI,CAACC,GAAG,CAACQ,YAAY,CAACe,SAAS,CAAC,EAAE,IAAAnB,OAAA,CAAAP,yBAAyB,EAACC,IAAI,CAAC,CAAC;IAC9F,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOU,YAAY;AACrB,CAAC;AApBYJ,OAAA,CAAAC,4BAA4B,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}