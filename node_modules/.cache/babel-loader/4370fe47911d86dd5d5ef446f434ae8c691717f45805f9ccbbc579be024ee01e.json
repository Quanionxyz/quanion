{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printSupportedNetworks = exports.buildContractUrl = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst ChainConfig_1 = require(\"./ChainConfig\");\nfunction buildContractUrl(browserURL, contractAddress) {\n  const normalizedBrowserURL = browserURL.trim().replace(/\\/$/, \"\");\n  return `${normalizedBrowserURL}/address/${contractAddress}#code`;\n}\nexports.buildContractUrl = buildContractUrl;\nasync function printSupportedNetworks(customChains) {\n  const {\n    table\n  } = await Promise.resolve().then(() => __importStar(require(\"table\")));\n  // supported networks\n  const supportedNetworks = Object.entries(ChainConfig_1.chainConfig).map(([network, config]) => [network, config.chainId])\n  // sort by chain id\n  .sort((a, b) => a[1] - b[1]);\n  const supportedNetworksTable = table([[chalk_1.default.bold(\"network\"), chalk_1.default.bold(\"chain id\")], ...supportedNetworks]);\n  // custom networks\n  const customNetworks = customChains.map(({\n    network,\n    chainId\n  }) => [network, chainId]);\n  const customNetworksTable = customNetworks.length > 0 ? table([[chalk_1.default.bold(\"network\"), chalk_1.default.bold(\"chain id\")], ...customNetworks]) : table([[\"No custom networks were added\"]]);\n  // print message\n  console.log(`\nNetworks supported by hardhat-etherscan:\n\n${supportedNetworksTable}\n\nCustom networks added by you or by plugins:\n\n${customNetworksTable}\n\nTo learn how to add custom networks, follow these instructions: https://hardhat.org/verify-custom-networks\n`.trimStart());\n}\nexports.printSupportedNetworks = printSupportedNetworks;","map":{"version":3,"names":["chalk_1","__importDefault","require","ChainConfig_1","buildContractUrl","browserURL","contractAddress","normalizedBrowserURL","trim","replace","exports","printSupportedNetworks","customChains","table","Promise","resolve","then","__importStar","supportedNetworks","Object","entries","chainConfig","map","network","config","chainId","sort","a","b","supportedNetworksTable","default","bold","customNetworks","customNetworksTable","length","console","log","trimStart"],"sources":["/workspace/quanion/node_modules/@nomiclabs/hardhat-etherscan/src/util.ts"],"sourcesContent":["import type { CustomChain } from \"./types\";\n\nimport chalk from \"chalk\";\n\nimport { chainConfig } from \"./ChainConfig\";\n\nexport function buildContractUrl(\n  browserURL: string,\n  contractAddress: string\n): string {\n  const normalizedBrowserURL = browserURL.trim().replace(/\\/$/, \"\");\n\n  return `${normalizedBrowserURL}/address/${contractAddress}#code`;\n}\n\nexport async function printSupportedNetworks(customChains: CustomChain[]) {\n  const { table } = await import(\"table\");\n\n  // supported networks\n  const supportedNetworks = Object.entries(chainConfig)\n    .map(([network, config]) => [network, config.chainId] as [string, number])\n    // sort by chain id\n    .sort((a, b) => a[1] - b[1]);\n\n  const supportedNetworksTable = table([\n    [chalk.bold(\"network\"), chalk.bold(\"chain id\")],\n    ...supportedNetworks,\n  ]);\n\n  // custom networks\n  const customNetworks = customChains.map(({ network, chainId }) => [\n    network,\n    chainId,\n  ]);\n\n  const customNetworksTable =\n    customNetworks.length > 0\n      ? table([\n          [chalk.bold(\"network\"), chalk.bold(\"chain id\")],\n          ...customNetworks,\n        ])\n      : table([[\"No custom networks were added\"]]);\n\n  // print message\n  console.log(\n    `\nNetworks supported by hardhat-etherscan:\n\n${supportedNetworksTable}\n\nCustom networks added by you or by plugins:\n\n${customNetworksTable}\n\nTo learn how to add custom networks, follow these instructions: https://hardhat.org/verify-custom-networks\n`.trimStart()\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,aAAA,GAAAD,OAAA;AAEA,SAAgBE,gBAAgBA,CAC9BC,UAAkB,EAClBC,eAAuB;EAEvB,MAAMC,oBAAoB,GAAGF,UAAU,CAACG,IAAI,EAAE,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAEjE,OAAO,GAAGF,oBAAoB,YAAYD,eAAe,OAAO;AAClE;AAPAI,OAAA,CAAAN,gBAAA,GAAAA,gBAAA;AASO,eAAeO,sBAAsBA,CAACC,YAA2B;EACtE,MAAM;IAAEC;EAAK,CAAE,GAAG,MAAAC,OAAA,CAAAC,OAAA,GAAAC,IAAA,OAAAC,YAAA,CAAAf,OAAA,CAAa,OAAO,GAAC;EAEvC;EACA,MAAMgB,iBAAiB,GAAGC,MAAM,CAACC,OAAO,CAACjB,aAAA,CAAAkB,WAAW,CAAC,CAClDC,GAAG,CAAC,CAAC,CAACC,OAAO,EAAEC,MAAM,CAAC,KAAK,CAACD,OAAO,EAAEC,MAAM,CAACC,OAAO,CAAqB;EACzE;EAAA,CACCC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC;EAE9B,MAAMC,sBAAsB,GAAGhB,KAAK,CAAC,CACnC,CAACb,OAAA,CAAA8B,OAAK,CAACC,IAAI,CAAC,SAAS,CAAC,EAAE/B,OAAA,CAAA8B,OAAK,CAACC,IAAI,CAAC,UAAU,CAAC,CAAC,EAC/C,GAAGb,iBAAiB,CACrB,CAAC;EAEF;EACA,MAAMc,cAAc,GAAGpB,YAAY,CAACU,GAAG,CAAC,CAAC;IAAEC,OAAO;IAAEE;EAAO,CAAE,KAAK,CAChEF,OAAO,EACPE,OAAO,CACR,CAAC;EAEF,MAAMQ,mBAAmB,GACvBD,cAAc,CAACE,MAAM,GAAG,CAAC,GACrBrB,KAAK,CAAC,CACJ,CAACb,OAAA,CAAA8B,OAAK,CAACC,IAAI,CAAC,SAAS,CAAC,EAAE/B,OAAA,CAAA8B,OAAK,CAACC,IAAI,CAAC,UAAU,CAAC,CAAC,EAC/C,GAAGC,cAAc,CAClB,CAAC,GACFnB,KAAK,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;EAEhD;EACAsB,OAAO,CAACC,GAAG,CACT;;;EAGFP,sBAAsB;;;;EAItBI,mBAAmB;;;CAGpB,CAACI,SAAS,EAAE,CACV;AACH;AA1CA3B,OAAA,CAAAC,sBAAA,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}