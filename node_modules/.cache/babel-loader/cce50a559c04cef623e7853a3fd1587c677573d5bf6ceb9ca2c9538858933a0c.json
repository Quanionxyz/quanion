{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@quais/address\";\nimport { BigNumber } from \"@quais/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@quais/bytes\";\nimport { AddressZero } from \"@quais/constants\";\nimport { shallowCopy } from \"@quais/properties\";\nimport { accessListify, parse as parseTransaction } from \"@quais/transactions\";\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst HIERARCHY_DEPTH = 3;\nexport class Formatter {\n  constructor() {\n    this.formats = this.getDefaultFormats();\n  }\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const bigNumberArray = this.bigNumberArray.bind(this);\n    const numberArray = this.numberArray.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hashArray = this.hashArray.bind(this);\n    const hashArrayAnyLength = this.hashArrayAnyLength.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n    const etxs = this.etxs.bind(this);\n    const strictData = v => {\n      return this.data(v, true);\n    };\n    formats.transaction = {\n      hash: hash,\n      type: hex,\n      accessList: Formatter.allowNull(this.accessList.bind(this), null),\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      from: address,\n      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n      // must be set\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: Formatter.allowNull(data),\n      r: Formatter.allowNull(hex),\n      s: Formatter.allowNull(hex),\n      v: Formatter.allowNull(hex),\n      raw: Formatter.allowNull(data),\n      gas: Formatter.allowNull(bigNumber),\n      //EXT TRANSACTIONS\n      etxGasLimit: Formatter.allowNull(bigNumber),\n      etxGasPrice: Formatter.allowNull(bigNumber),\n      etxGasTip: Formatter.allowNull(bigNumber),\n      etxData: Formatter.allowNull(data),\n      etxAccessList: Formatter.allowNull(this.accessList.bind(this), null)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData),\n      type: Formatter.allowNull(number),\n      accessList: Formatter.allowNull(this.accessList.bind(this), null),\n      externalGasPrice: Formatter.allowNull(bigNumber),\n      externalMaxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      externalGasTip: Formatter.allowNull(bigNumber),\n      externalAccessList: Formatter.allowNull(this.accessList.bind(this), null)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(hex),\n      blockHash: hash,\n      transactionHash: hash,\n      etxs: Formatter.allowNull(etxs, null),\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      effectiveGasPrice: Formatter.allowNull(bigNumber),\n      status: hex,\n      type: hex\n    };\n    formats.block = {\n      hash: Formatter.allowNull(hash),\n      parentHash: hashArray,\n      parentEntropy: bigNumberArray,\n      number: numberArray,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: bigNumber,\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      baseFeePerGas: Formatter.allowNull(bigNumber),\n      miner: Formatter.allowNull(address),\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n      transactionsRoot: hash,\n      extTransactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n      extRollupRoot: Formatter.allowNull(hash),\n      extTransactionsRoot: Formatter.allowNull(hash),\n      location: Formatter.allowNull(hex),\n      manifestHash: hashArrayAnyLength,\n      mixHash: hash,\n      order: Number,\n      parentDeltaS: bigNumberArray,\n      receiptsRoot: hash,\n      sha3Uncles: hash,\n      size: bigNumber,\n      stateRoot: hash,\n      uncles: Formatter.allowNull(Formatter.arrayOf(hash)),\n      subManifest: Formatter.allowNull(Formatter.arrayOf(hash)),\n      totalEntropy: bigNumber\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  }\n  accessList(accessList) {\n    return accessListify(accessList || []);\n  }\n  // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n    return BigNumber.from(number).toNumber();\n  }\n  // Strict! Used on input.\n  bigNumber(value) {\n    return BigNumber.from(value);\n  }\n  numberArray(value) {\n    return Array.from(value, item => Number(item));\n  }\n  // Strict! Used on input.\n  bigNumberArray(value) {\n    return Array.from(value, item => BigNumber.from(item));\n  }\n  // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n      if (value === \"true\") {\n        return true;\n      }\n      if (value === \"false\") {\n        return false;\n      }\n    }\n    throw new Error(\"invalid boolean - \" + value);\n  }\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n  data(value, strict) {\n    const result = this.hex(value, strict);\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n    return result;\n  }\n  // Requires an address\n  // Strict! Used on input.\n  address(value) {\n    return getAddress(value);\n  }\n  etxs(value) {\n    if (!Array.isArray(value)) {\n      throw new Error(\"Value must be an array.\");\n    }\n    const formattedEtxs = [];\n    for (let i = 0; i < value.length; i++) {\n      const etx = value[i];\n      formattedEtxs.push({\n        type: etx.type,\n        nonce: Number(etx.nonce),\n        gasPrice: Formatter.allowNull(this.bigNumber, null)(etx.gasPrice),\n        maxPriorityFeePerGas: this.bigNumber(etx.maxPriorityFeePerGas),\n        maxFeePerGas: this.bigNumber(etx.maxFeePerGas),\n        gas: this.bigNumber(etx.gas),\n        value: this.bigNumber(etx.value),\n        data: this.data(etx.input),\n        to: this.address(etx.to),\n        accessList: Formatter.allowNull(this.accessList, null)(etx.accessList),\n        // Add more detailed parsing if needed\n        chainId: Number(etx.chainId),\n        from: this.address(etx.sender),\n        hash: this.hash(etx.hash)\n      });\n    }\n    return formattedEtxs;\n  }\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n  contractAddress(value) {\n    return getContractAddress(value.from, value.nonce, value.data);\n  }\n  // Strict! Used on input.\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n    switch (blockTag) {\n      case \"earliest\":\n        return \"0x0\";\n      case \"latest\":\n      case \"pending\":\n      case \"safe\":\n      case \"finalized\":\n        return blockTag;\n    }\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n    throw new Error(\"invalid blockTag\");\n  }\n  // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    return result;\n  }\n  // Requires a hash array, optionally requires 0x prefix; returns prefixed lowercase hash.\n  hashArray(value, strict) {\n    if (value.length != HIERARCHY_DEPTH) {\n      return logger.throwArgumentError(\"invalid hash array\", \"value\", value);\n    }\n    let results = [];\n    for (const hash of value) {\n      const result = this.hex(hash, strict);\n      if (hexDataLength(result) !== 32) {\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n      }\n      results.push(result);\n    }\n    return results;\n  }\n  hashArrayAnyLength(value, strict) {\n    if (value.length != HIERARCHY_DEPTH) {\n      return logger.throwArgumentError(\"invalid hash array\", \"value\", value);\n    }\n    let results = [];\n    for (const hash of value) {\n      const result = this.hex(hash, strict);\n      results.push(result);\n    }\n    return results;\n  }\n  // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n    const v = BigNumber.from(value);\n    try {\n      return v.toNumber();\n    } catch (error) {}\n    return null;\n  }\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n    return hexZeroPad(value, 32);\n  }\n  _block(value, format, simplify) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    }\n    // The difficulty may need to come from _difficulty in recursed blocks\n    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n    const result = Formatter.check(format, value);\n    result._difficulty = difficulty == null ? null : difficulty;\n    return this.contextBlock(result, simplify);\n  }\n  block(value, simplify) {\n    return this._block(value, this.formats.block, simplify);\n  }\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  }\n  contextBlock(value, simplify = false) {\n    let contextBlock = {\n      number: simplify ? value.number[2] : value.number,\n      transactions: value.transactions,\n      hash: value.hash,\n      parentHash: simplify ? value.parentHash[2] : value.parentHash,\n      parentEntropy: simplify ? value.parentEntropy[2] : value.parentEntropy,\n      extTransactions: value.extTransactions,\n      timestamp: value.timestamp,\n      nonce: value.nonce,\n      difficulty: value.difficulty,\n      gasLimit: value.gasLimit,\n      gasUsed: value.gasUsed,\n      miner: value.miner,\n      extraData: value.extraData,\n      transactionsRoot: value.transactionsRoot,\n      stateRoot: value.stateRoot,\n      receiptsRoot: value.receiptsRoot,\n      baseFeePerGas: value.baseFeePerGas,\n      extRollupRoot: value.extRollupRoot,\n      extTransactionsRoot: value.extTransactionsRoot,\n      location: value.location,\n      manifestHash: simplify ? value.manifestHash[2] : value.manifestHash,\n      mixHash: value.mixHash,\n      order: value.order,\n      parentDeltaS: simplify ? value.parentDeltaS[2] : value.parentDeltaS,\n      sha3Uncles: value.sha3Uncles,\n      size: value.size,\n      uncles: value.uncles,\n      subManifest: value.subManifest,\n      totalEntropy: value.totalEntropy\n    };\n    return contextBlock;\n  }\n  // Strict! Used on input.\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gas = transaction.gas;\n    }\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    // Rename input to data\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    }\n    if (transaction.type == '0x1') {\n      transaction.from = transaction.sender;\n      delete transaction.sender;\n    }\n    if ((transaction.type === '0x1' || transaction.type === '0x2') && transaction.accessList == null) {\n      transaction.accessList = [];\n    }\n    const result = Formatter.check(this.formats.transaction, transaction);\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId;\n      // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n        if (chainId < 0) {\n          chainId = 0;\n        }\n        chainId = parseInt(chainId);\n      }\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n      result.chainId = chainId;\n    }\n    // 0x0000... should actually be null\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n    return result;\n  }\n  transaction(value) {\n    return parseTransaction(value);\n  }\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value);\n    // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n    return result;\n  }\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n    return null;\n  }\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n  static check(format, object) {\n    const result = {};\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n    return result;\n  }\n  // if value is null-ish, nullValue is returned\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n      return format(value);\n    };\n  }\n  // If value is false-ish, replaceValue is returned\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n      return format(value);\n    };\n  }\n  // Requires an Array satisfying check\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","accessListify","parse","parseTransaction","Logger","version","logger","HIERARCHY_DEPTH","Formatter","constructor","formats","getDefaultFormats","address","bind","bigNumber","bigNumberArray","numberArray","blockTag","data","hash","hashArray","hashArrayAnyLength","hex","number","etxs","strictData","v","transaction","type","accessList","allowNull","blockHash","blockNumber","transactionIndex","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","to","value","nonce","r","s","raw","gas","etxGasLimit","etxGasPrice","etxGasTip","etxData","etxAccessList","transactionRequest","gasLimit","externalGasPrice","externalMaxPriorityFeePerGas","externalGasTip","externalAccessList","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","confirmations","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","parentEntropy","timestamp","difficulty","baseFeePerGas","miner","extraData","transactions","transactionsRoot","extTransactions","extRollupRoot","extTransactionsRoot","location","manifestHash","mixHash","order","Number","parentDeltaS","receiptsRoot","sha3Uncles","size","stateRoot","uncles","subManifest","totalEntropy","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","allowFalsish","toNumber","Array","item","boolean","toLowerCase","Error","strict","substring","throwArgumentError","result","length","isArray","formattedEtxs","i","etx","push","input","chainId","sender","callAddress","results","error","uint256","_block","format","simplify","author","_difficulty","check","contextBlock","isZero","networkId","parseInt","replace","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"sources":["/workspace/quanion/node_modules/@quais/providers/src.ts/formatter.ts"],"sourcesContent":["\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@quais/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@quais/address\";\nimport { BigNumber } from \"@quais/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@quais/bytes\";\nimport { AddressZero } from \"@quais/constants\";\nimport { shallowCopy } from \"@quais/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@quais/transactions\";\n\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst HIERARCHY_DEPTH = 3;\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const bigNumberArray = this.bigNumberArray.bind(this);\n        const numberArray = this.numberArray.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hashArray = this.hashArray.bind(this);\n        const hashArrayAnyLength = this.hashArrayAnyLength.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const etxs = this.etxs.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: hex,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: Formatter.allowNull(data),\n\n            r: Formatter.allowNull(hex),\n            s: Formatter.allowNull(hex),\n            v: Formatter.allowNull(hex),\n\n            raw: Formatter.allowNull(data),\n\n            gas: Formatter.allowNull(bigNumber),\n\n            //EXT TRANSACTIONS\n            etxGasLimit: Formatter.allowNull(bigNumber),\n            etxGasPrice: Formatter.allowNull(bigNumber),\n            etxGasTip: Formatter.allowNull(bigNumber),\n            etxData: Formatter.allowNull(data), \n            etxAccessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            externalGasPrice: Formatter.allowNull(bigNumber),\n            externalMaxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            externalGasTip: Formatter.allowNull(bigNumber), \n            externalAccessList: Formatter.allowNull(this.accessList.bind(this), null),       \n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(hex),\n            blockHash: hash,\n            transactionHash: hash,\n            etxs: Formatter.allowNull(etxs, null),\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: hex,\n            type: hex,\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hashArray,\n            parentEntropy:  bigNumberArray,\n            number: numberArray,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: bigNumber,\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            baseFeePerGas: Formatter.allowNull(bigNumber),\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            transactionsRoot: hash,\n            extTransactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            extRollupRoot: Formatter.allowNull(hash),\n            extTransactionsRoot:  Formatter.allowNull(hash),\n            location: Formatter.allowNull(hex),\n\n            manifestHash: hashArrayAnyLength,\n            mixHash: hash,\n\n            order: Number,\n\n            parentDeltaS: bigNumberArray,\n            receiptsRoot: hash,\n            sha3Uncles: hash,\n            size: bigNumber,\n            stateRoot: hash,\n            uncles: Formatter.allowNull(Formatter.arrayOf(hash)),\n            subManifest: Formatter.allowNull(Formatter.arrayOf(hash)),\n            totalEntropy: bigNumber,\n\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n\n    numberArray(value: any[]): Number[] {\n        return Array.from(value, item => (Number(item)));\n    }\n\n\n    // Strict! Used on input.\n    bigNumberArray(value: any): BigNumber[] {\n        return Array.from(value, item => (BigNumber.from(item)));\n    }    \n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    etxs(value: any): any {\n        if (!Array.isArray(value)) {\n            throw new Error(\"Value must be an array.\");\n        }\n        const formattedEtxs = [];\n\n        for (let i = 0; i < value.length; i++) {\n            const etx = value[i];\n            \n            formattedEtxs.push({\n                type: etx.type,\n                nonce: Number(etx.nonce),\n                gasPrice: Formatter.allowNull(this.bigNumber, null)(etx.gasPrice),\n                maxPriorityFeePerGas: this.bigNumber(etx.maxPriorityFeePerGas),\n                maxFeePerGas: this.bigNumber(etx.maxFeePerGas),\n                gas: this.bigNumber(etx.gas),\n                value: this.bigNumber(etx.value),\n                data: this.data(etx.input),\n                to: this.address(etx.to),\n                accessList: Formatter.allowNull(this.accessList, null)(etx.accessList),  // Add more detailed parsing if needed\n                chainId: Number(etx.chainId),\n                from: this.address(etx.sender),\n                hash: this.hash(etx.hash)\n            });\n        }\n    \n        return formattedEtxs;\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value.from, value.nonce, value.data);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Requires a hash array, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hashArray(value: any, strict?: boolean): string[] {\n      if (value.length != HIERARCHY_DEPTH) {\n        return logger.throwArgumentError(\"invalid hash array\", \"value\", value);\n      }\n      let results: string[] = [];\n      for (const hash of value) {\n        const result = this.hex(hash, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        results.push(result);\n      }\n      return results;\n    }\n\n    hashArrayAnyLength(value: any, strict?: boolean): string[] {\n        if (value.length != HIERARCHY_DEPTH) {\n          return logger.throwArgumentError(\"invalid hash array\", \"value\", value);\n        }\n        let results: string[] = [];\n        for (const hash of value) {\n          const result = this.hex(hash, strict);\n          results.push(result);\n        }\n        return results;\n      }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any, simplify?: boolean): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: difficulty);\n        return this.contextBlock(result, simplify);\n        }\n\n    block(value: any, simplify?: boolean): Block {\n        return this._block(value, this.formats.block, simplify);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    contextBlock(value: any, simplify: boolean = false): Block{\n        \n        let contextBlock: Block = {\n            number: simplify ? value.number[2] : value.number,\n            transactions: value.transactions,\n            hash: value.hash,\n            parentHash: simplify ? value.parentHash[2] : value.parentHash,\n            parentEntropy: simplify ? value.parentEntropy[2] : value.parentEntropy,\n            extTransactions: value.extTransactions,\n            timestamp: value.timestamp,\n            nonce: value.nonce,\n            difficulty: value.difficulty,\n            gasLimit: value.gasLimit,\n            gasUsed: value.gasUsed,\n            miner: value.miner,\n            extraData: value.extraData,\n            transactionsRoot: value.transactionsRoot,\n            stateRoot: value.stateRoot,\n            receiptsRoot: value.receiptsRoot,\n    \n\n            baseFeePerGas: value.baseFeePerGas,\n\n            extRollupRoot: value.extRollupRoot,\n            extTransactionsRoot:  value.extTransactionsRoot,\n            location: value.location,\n\n            manifestHash: simplify ? value.manifestHash[2] : value.manifestHash,\n            mixHash: value.mixHash,\n\n            order: value.order,\n\n            parentDeltaS: simplify ? value.parentDeltaS[2] : value.parentDeltaS,\n            sha3Uncles: value.sha3Uncles,\n            size: value.size,\n            uncles: value.uncles,\n            subManifest: value.subManifest,\n            totalEntropy: value.totalEntropy,\n        }\n        return contextBlock\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gas = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        if (transaction.type == '0x1'){\n            transaction.from = transaction.sender\n            delete transaction.sender\n        }\n        if ((transaction.type === '0x1' || transaction.type === '0x2')&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}