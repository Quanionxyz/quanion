{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapCell = void 0;\nconst utils_1 = require(\"./utils\");\nconst wrapString_1 = require(\"./wrapString\");\nconst wrapWord_1 = require(\"./wrapWord\");\n/**\n * Wrap a single cell value into a list of lines\n *\n * Always wraps on newlines, for the remainder uses either word or string wrapping\n * depending on user configuration.\n *\n */\nconst wrapCell = (cellValue, cellWidth, useWrapWord) => {\n  // First split on literal newlines\n  const cellLines = (0, utils_1.splitAnsi)(cellValue);\n  // Then iterate over the list and word-wrap every remaining line if necessary.\n  for (let lineNr = 0; lineNr < cellLines.length;) {\n    let lineChunks;\n    if (useWrapWord) {\n      lineChunks = (0, wrapWord_1.wrapWord)(cellLines[lineNr], cellWidth);\n    } else {\n      lineChunks = (0, wrapString_1.wrapString)(cellLines[lineNr], cellWidth);\n    }\n    // Replace our original array element with whatever the wrapping returned\n    cellLines.splice(lineNr, 1, ...lineChunks);\n    lineNr += lineChunks.length;\n  }\n  return cellLines;\n};\nexports.wrapCell = wrapCell;","map":{"version":3,"names":["utils_1","require","wrapString_1","wrapWord_1","wrapCell","cellValue","cellWidth","useWrapWord","cellLines","splitAnsi","lineNr","length","lineChunks","wrapWord","wrapString","splice","exports"],"sources":["../../src/wrapCell.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAGA,MAAAC,YAAA,GAAAD,OAAA;AAGA,MAAAE,UAAA,GAAAF,OAAA;AAIA;;;;;;;AAOO,MAAMG,QAAQ,GAAGA,CAACC,SAAiB,EAAEC,SAAiB,EAAEC,WAAoB,KAAc;EAC/F;EACA,MAAMC,SAAS,GAAG,IAAAR,OAAA,CAAAS,SAAS,EAACJ,SAAS,CAAC;EAEtC;EACA,KAAK,IAAIK,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,SAAS,CAACG,MAAM,GAAG;IAC/C,IAAIC,UAAU;IAEd,IAAIL,WAAW,EAAE;MACfK,UAAU,GAAG,IAAAT,UAAA,CAAAU,QAAQ,EAACL,SAAS,CAACE,MAAM,CAAC,EAAEJ,SAAS,CAAC;KACpD,MAAM;MACLM,UAAU,GAAG,IAAAV,YAAA,CAAAY,UAAU,EAACN,SAAS,CAACE,MAAM,CAAC,EAAEJ,SAAS,CAAC;;IAGvD;IACAE,SAAS,CAACO,MAAM,CAACL,MAAM,EAAE,CAAC,EAAE,GAAGE,UAAU,CAAC;IAC1CF,MAAM,IAAIE,UAAU,CAACD,MAAM;;EAG7B,OAAOH,SAAS;AAClB,CAAC;AApBYQ,OAAA,CAAAZ,QAAQ,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}