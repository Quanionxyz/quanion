{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapDataUsingRowHeights = exports.padCellVertically = void 0;\nconst utils_1 = require(\"./utils\");\nconst wrapCell_1 = require(\"./wrapCell\");\nconst createEmptyStrings = length => {\n  return new Array(length).fill('');\n};\nconst padCellVertically = (lines, rowHeight, verticalAlignment) => {\n  const availableLines = rowHeight - lines.length;\n  if (verticalAlignment === 'top') {\n    return [...lines, ...createEmptyStrings(availableLines)];\n  }\n  if (verticalAlignment === 'bottom') {\n    return [...createEmptyStrings(availableLines), ...lines];\n  }\n  return [...createEmptyStrings(Math.floor(availableLines / 2)), ...lines, ...createEmptyStrings(Math.ceil(availableLines / 2))];\n};\nexports.padCellVertically = padCellVertically;\nconst mapDataUsingRowHeights = (unmappedRows, rowHeights, config) => {\n  const nColumns = unmappedRows[0].length;\n  const mappedRows = unmappedRows.map((unmappedRow, unmappedRowIndex) => {\n    const outputRowHeight = rowHeights[unmappedRowIndex];\n    const outputRow = Array.from({\n      length: outputRowHeight\n    }, () => {\n      return new Array(nColumns).fill('');\n    });\n    unmappedRow.forEach((cell, cellIndex) => {\n      var _a;\n      const containingRange = (_a = config.spanningCellManager) === null || _a === void 0 ? void 0 : _a.getContainingRange({\n        col: cellIndex,\n        row: unmappedRowIndex\n      });\n      if (containingRange) {\n        containingRange.extractCellContent(unmappedRowIndex).forEach((cellLine, cellLineIndex) => {\n          outputRow[cellLineIndex][cellIndex] = cellLine;\n        });\n        return;\n      }\n      const cellLines = (0, wrapCell_1.wrapCell)(cell, config.columns[cellIndex].width, config.columns[cellIndex].wrapWord);\n      const paddedCellLines = (0, exports.padCellVertically)(cellLines, outputRowHeight, config.columns[cellIndex].verticalAlignment);\n      paddedCellLines.forEach((cellLine, cellLineIndex) => {\n        outputRow[cellLineIndex][cellIndex] = cellLine;\n      });\n    });\n    return outputRow;\n  });\n  return (0, utils_1.flatten)(mappedRows);\n};\nexports.mapDataUsingRowHeights = mapDataUsingRowHeights;","map":{"version":3,"names":["utils_1","require","wrapCell_1","createEmptyStrings","length","Array","fill","padCellVertically","lines","rowHeight","verticalAlignment","availableLines","Math","floor","ceil","exports","mapDataUsingRowHeights","unmappedRows","rowHeights","config","nColumns","mappedRows","map","unmappedRow","unmappedRowIndex","outputRowHeight","outputRow","from","forEach","cell","cellIndex","containingRange","_a","spanningCellManager","getContainingRange","col","row","extractCellContent","cellLine","cellLineIndex","cellLines","wrapCell","columns","width","wrapWord","paddedCellLines","flatten"],"sources":["../../src/mapDataUsingRowHeights.ts"],"sourcesContent":[null],"mappings":";;;;;;AAOA,MAAAA,OAAA,GAAAC,OAAA;AAGA,MAAAC,UAAA,GAAAD,OAAA;AAIA,MAAME,kBAAkB,GAAIC,MAAc,IAAI;EAC5C,OAAO,IAAIC,KAAK,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;AACnC,CAAC;AAEM,MAAMC,iBAAiB,GAAGA,CAACC,KAAe,EAAEC,SAAiB,EAAEC,iBAAoC,KAAc;EACtH,MAAMC,cAAc,GAAGF,SAAS,GAAGD,KAAK,CAACJ,MAAM;EAE/C,IAAIM,iBAAiB,KAAK,KAAK,EAAE;IAC/B,OAAO,CAAC,GAAGF,KAAK,EAAE,GAAGL,kBAAkB,CAACQ,cAAc,CAAC,CAAC;;EAG1D,IAAID,iBAAiB,KAAK,QAAQ,EAAE;IAClC,OAAO,CAAC,GAAGP,kBAAkB,CAACQ,cAAc,CAAC,EAAE,GAAGH,KAAK,CAAC;;EAG1D,OAAO,CACL,GAAGL,kBAAkB,CAACS,IAAI,CAACC,KAAK,CAACF,cAAc,GAAG,CAAC,CAAC,CAAC,EACrD,GAAGH,KAAK,EACR,GAAGL,kBAAkB,CAACS,IAAI,CAACE,IAAI,CAACH,cAAc,GAAG,CAAC,CAAC,CAAC,CACrD;AACH,CAAC;AAhBYI,OAAA,CAAAR,iBAAiB,GAAAA,iBAAA;AAkBvB,MAAMS,sBAAsB,GAAGA,CAACC,YAAmB,EAAEC,UAAoB,EAAEC,MAAkB,KAAW;EAC7G,MAAMC,QAAQ,GAAGH,YAAY,CAAC,CAAC,CAAC,CAACb,MAAM;EAEvC,MAAMiB,UAAU,GAAGJ,YAAY,CAACK,GAAG,CAAC,CAACC,WAAW,EAAEC,gBAAgB,KAAI;IACpE,MAAMC,eAAe,GAAGP,UAAU,CAACM,gBAAgB,CAAC;IACpD,MAAME,SAAS,GAAUrB,KAAK,CAACsB,IAAI,CAAC;MAACvB,MAAM,EAAEqB;IAAe,CAAC,EAAE,MAAK;MAClE,OAAO,IAAIpB,KAAK,CAACe,QAAQ,CAAC,CAACd,IAAI,CAAC,EAAE,CAAC;IACrC,CAAC,CAAC;IAEFiB,WAAW,CAACK,OAAO,CAAC,CAACC,IAAI,EAAEC,SAAS,KAAI;;MACtC,MAAMC,eAAe,GAAG,CAAAC,EAAA,GAAAb,MAAM,CAACc,mBAAmB,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,kBAAkB,CAAC;QAACC,GAAG,EAAEL,SAAS;QACpFM,GAAG,EAAEZ;MAAgB,CAAC,CAAC;MACzB,IAAIO,eAAe,EAAE;QACnBA,eAAe,CAACM,kBAAkB,CAACb,gBAAgB,CAAC,CAACI,OAAO,CAAC,CAACU,QAAQ,EAAEC,aAAa,KAAI;UACvFb,SAAS,CAACa,aAAa,CAAC,CAACT,SAAS,CAAC,GAAGQ,QAAQ;QAChD,CAAC,CAAC;QAEF;;MAEF,MAAME,SAAS,GAAG,IAAAtC,UAAA,CAAAuC,QAAQ,EAACZ,IAAI,EAAEV,MAAM,CAACuB,OAAO,CAACZ,SAAS,CAAC,CAACa,KAAK,EAAExB,MAAM,CAACuB,OAAO,CAACZ,SAAS,CAAC,CAACc,QAAQ,CAAC;MAErG,MAAMC,eAAe,GAAG,IAAA9B,OAAA,CAAAR,iBAAiB,EAACiC,SAAS,EAAEf,eAAe,EAAEN,MAAM,CAACuB,OAAO,CAACZ,SAAS,CAAC,CAACpB,iBAAiB,CAAC;MAElHmC,eAAe,CAACjB,OAAO,CAAC,CAACU,QAAQ,EAAEC,aAAa,KAAI;QAClDb,SAAS,CAACa,aAAa,CAAC,CAACT,SAAS,CAAC,GAAGQ,QAAQ;MAChD,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOZ,SAAS;EAClB,CAAC,CAAC;EAEF,OAAO,IAAA1B,OAAA,CAAA8C,OAAO,EAACzB,UAAU,CAAC;AAC5B,CAAC;AAhCYN,OAAA,CAAAC,sBAAsB,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}