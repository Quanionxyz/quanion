{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVersions = exports.getLongVersion = void 0;\nconst constants_1 = require(\"../constants\");\nconst errors_1 = require(\"../errors\");\nconst undici_1 = require(\"../undici\");\nconst COMPILERS_LIST_URL = \"https://solc-bin.ethereum.org/bin/list.json\";\n// TODO: this could be retrieved from the hardhat config instead.\nasync function getLongVersion(shortVersion) {\n  const versions = await getVersions();\n  const fullVersion = versions.releases[shortVersion];\n  if (fullVersion === undefined || fullVersion === \"\") {\n    throw new errors_1.HardhatEtherscanPluginError(constants_1.pluginName, \"Given solc version doesn't exist\");\n  }\n  return fullVersion.replace(/(soljson-)(.*)(.js)/, \"$2\");\n}\nexports.getLongVersion = getLongVersion;\nasync function getVersions() {\n  try {\n    // It would be better to query an etherscan API to get this list but there's no such API yet.\n    const response = await (0, undici_1.sendGetRequest)(new URL(COMPILERS_LIST_URL));\n    if (!(response.statusCode >= 200 && response.statusCode <= 299)) {\n      const responseText = await response.body.text();\n      throw new errors_1.HardhatEtherscanPluginError(constants_1.pluginName, `HTTP response is not ok. Status code: ${response.statusCode} Response text: ${responseText}`);\n    }\n    return await response.body.json();\n  } catch (error) {\n    throw new errors_1.HardhatEtherscanPluginError(constants_1.pluginName, `Failed to obtain list of solc versions. Reason: ${error.message}`, error);\n  }\n}\nexports.getVersions = getVersions;","map":{"version":3,"names":["constants_1","require","errors_1","undici_1","COMPILERS_LIST_URL","getLongVersion","shortVersion","versions","getVersions","fullVersion","releases","undefined","HardhatEtherscanPluginError","pluginName","replace","exports","response","sendGetRequest","URL","statusCode","responseText","body","text","json","error","message"],"sources":["/workspace/quanion/node_modules/@nomiclabs/hardhat-etherscan/src/solc/version.ts"],"sourcesContent":["import { pluginName } from \"../constants\";\nimport { HardhatEtherscanPluginError } from \"../errors\";\nimport { sendGetRequest } from \"../undici\";\n\nconst COMPILERS_LIST_URL = \"https://solc-bin.ethereum.org/bin/list.json\";\n\n// Non-exhaustive interface for the official compiler list.\nexport interface CompilersList {\n  releases: {\n    [version: string]: string;\n  };\n  latestRelease: string;\n}\n\n// TODO: this could be retrieved from the hardhat config instead.\nexport async function getLongVersion(shortVersion: string): Promise<string> {\n  const versions = await getVersions();\n  const fullVersion = versions.releases[shortVersion];\n\n  if (fullVersion === undefined || fullVersion === \"\") {\n    throw new HardhatEtherscanPluginError(\n      pluginName,\n      \"Given solc version doesn't exist\"\n    );\n  }\n\n  return fullVersion.replace(/(soljson-)(.*)(.js)/, \"$2\");\n}\n\nexport async function getVersions(): Promise<CompilersList> {\n  try {\n    // It would be better to query an etherscan API to get this list but there's no such API yet.\n    const response = await sendGetRequest(new URL(COMPILERS_LIST_URL));\n\n    if (!(response.statusCode >= 200 && response.statusCode <= 299)) {\n      const responseText = await response.body.text();\n      throw new HardhatEtherscanPluginError(\n        pluginName,\n        `HTTP response is not ok. Status code: ${response.statusCode} Response text: ${responseText}`\n      );\n    }\n\n    return (await response.body.json()) as CompilersList;\n  } catch (error: any) {\n    throw new HardhatEtherscanPluginError(\n      pluginName,\n      `Failed to obtain list of solc versions. Reason: ${error.message}`,\n      error\n    );\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,QAAA,GAAAF,OAAA;AAEA,MAAMG,kBAAkB,GAAG,6CAA6C;AAUxE;AACO,eAAeC,cAAcA,CAACC,YAAoB;EACvD,MAAMC,QAAQ,GAAG,MAAMC,WAAW,EAAE;EACpC,MAAMC,WAAW,GAAGF,QAAQ,CAACG,QAAQ,CAACJ,YAAY,CAAC;EAEnD,IAAIG,WAAW,KAAKE,SAAS,IAAIF,WAAW,KAAK,EAAE,EAAE;IACnD,MAAM,IAAIP,QAAA,CAAAU,2BAA2B,CACnCZ,WAAA,CAAAa,UAAU,EACV,kCAAkC,CACnC;;EAGH,OAAOJ,WAAW,CAACK,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAAC;AACzD;AAZAC,OAAA,CAAAV,cAAA,GAAAA,cAAA;AAcO,eAAeG,WAAWA,CAAA;EAC/B,IAAI;IACF;IACA,MAAMQ,QAAQ,GAAG,MAAM,IAAAb,QAAA,CAAAc,cAAc,EAAC,IAAIC,GAAG,CAACd,kBAAkB,CAAC,CAAC;IAElE,IAAI,EAAEY,QAAQ,CAACG,UAAU,IAAI,GAAG,IAAIH,QAAQ,CAACG,UAAU,IAAI,GAAG,CAAC,EAAE;MAC/D,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACC,IAAI,EAAE;MAC/C,MAAM,IAAIpB,QAAA,CAAAU,2BAA2B,CACnCZ,WAAA,CAAAa,UAAU,EACV,yCAAyCG,QAAQ,CAACG,UAAU,mBAAmBC,YAAY,EAAE,CAC9F;;IAGH,OAAQ,MAAMJ,QAAQ,CAACK,IAAI,CAACE,IAAI,EAAE;GACnC,CAAC,OAAOC,KAAU,EAAE;IACnB,MAAM,IAAItB,QAAA,CAAAU,2BAA2B,CACnCZ,WAAA,CAAAa,UAAU,EACV,mDAAmDW,KAAK,CAACC,OAAO,EAAE,EAClED,KAAK,CACN;;AAEL;AArBAT,OAAA,CAAAP,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}