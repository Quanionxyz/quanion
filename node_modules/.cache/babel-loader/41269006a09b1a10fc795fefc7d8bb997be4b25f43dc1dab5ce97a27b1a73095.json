{"ast":null,"code":"\"use strict\";\n\n// This file defines the different config types.\n//\n// For each possible kind of config value, we have two types:\n//\n// One that ends with UserConfig, which represent the config as\n// written in the user's config file.\n//\n// The other one, with the same name except without the User part, represents\n// the resolved value as used during the hardhat execution.\n//\n// Note that while many declarations are repeated here (i.e. network types'\n// fields), we don't use `extends` as that can interfere with plugin authors\n// trying to augment the config types.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["/workspace/quanion/node_modules/hardhat/src/types/config.ts"],"sourcesContent":["// This file defines the different config types.\n//\n// For each possible kind of config value, we have two types:\n//\n// One that ends with UserConfig, which represent the config as\n// written in the user's config file.\n//\n// The other one, with the same name except without the User part, represents\n// the resolved value as used during the hardhat execution.\n//\n// Note that while many declarations are repeated here (i.e. network types'\n// fields), we don't use `extends` as that can interfere with plugin authors\n// trying to augment the config types.\n\n// Networks config\n\nexport interface NetworksUserConfig {\n  hardhat?: HardhatNetworkUserConfig;\n\n  [networkName: string]: NetworkUserConfig | undefined;\n}\n\nexport type NetworkUserConfig =\n  | HardhatNetworkUserConfig\n  | HttpNetworkUserConfig;\n\nexport interface HardforkHistoryUserConfig {\n  [hardforkName: string]: number /* block number */;\n}\n\nexport interface HardhatNetworkChainUserConfig {\n  hardforkHistory?: HardforkHistoryUserConfig;\n}\n\nexport interface HardhatNetworkChainsUserConfig {\n  [chainId: number]: HardhatNetworkChainUserConfig;\n}\n\nexport interface HardhatNetworkUserConfig {\n  chainId?: number;\n  from?: string;\n  gas?: \"auto\" | number;\n  gasPrice?: \"auto\" | number;\n  gasMultiplier?: number;\n  initialBaseFeePerGas?: number;\n  hardfork?: string;\n  mining?: HardhatNetworkMiningUserConfig;\n  accounts?: HardhatNetworkAccountsUserConfig;\n  blockGasLimit?: number;\n  minGasPrice?: number | string;\n  throwOnTransactionFailures?: boolean;\n  throwOnCallFailures?: boolean;\n  allowUnlimitedContractSize?: boolean;\n  allowBlocksWithSameTimestamp?: boolean;\n  initialDate?: string;\n  loggingEnabled?: boolean;\n  forking?: HardhatNetworkForkingUserConfig;\n  coinbase?: string;\n  chains?: HardhatNetworkChainsUserConfig;\n  enableTransientStorage?: boolean;\n}\n\nexport type HardhatNetworkAccountsUserConfig =\n  | HardhatNetworkAccountUserConfig[]\n  | HardhatNetworkHDAccountsUserConfig;\n\nexport interface HardhatNetworkAccountUserConfig {\n  privateKey: string;\n  balance: string;\n}\n\nexport interface HardhatNetworkHDAccountsUserConfig {\n  mnemonic?: string;\n  initialIndex?: number;\n  count?: number;\n  path?: string;\n  accountsBalance?: string;\n  passphrase?: string;\n}\n\nexport interface HDAccountsUserConfig {\n  mnemonic: string;\n  initialIndex?: number;\n  count?: number;\n  path?: string;\n  passphrase?: string;\n}\n\nexport interface HardhatNetworkForkingUserConfig {\n  enabled?: boolean;\n  url: string;\n  blockNumber?: number;\n  httpHeaders?: { [name: string]: string };\n}\n\nexport type HttpNetworkAccountsUserConfig =\n  | \"remote\"\n  | string[]\n  | HDAccountsUserConfig;\n\nexport interface HttpNetworkUserConfig {\n  chainId?: number;\n  from?: string;\n  gas?: \"auto\" | number;\n  gasPrice?: \"auto\" | number;\n  gasMultiplier?: number;\n  url?: string;\n  timeout?: number;\n  httpHeaders?: { [name: string]: string };\n  accounts?: HttpNetworkAccountsUserConfig;\n}\n\nexport interface NetworksConfig {\n  hardhat: HardhatNetworkConfig;\n  localhost: HttpNetworkConfig;\n\n  [networkName: string]: NetworkConfig;\n}\n\nexport type NetworkConfig = HardhatNetworkConfig | HttpNetworkConfig;\n\nexport type HardforkHistoryConfig = Map<\n  /* hardforkName */ string,\n  /* blockNumber */ number\n>;\n\nexport interface HardhatNetworkChainConfig {\n  hardforkHistory: HardforkHistoryConfig;\n}\n\nexport type HardhatNetworkChainsConfig = Map<\n  /* chainId */ number,\n  HardhatNetworkChainConfig\n>;\n\nexport interface HardhatNetworkConfig {\n  chainId: number;\n  from?: string;\n  gas: \"auto\" | number;\n  gasPrice: \"auto\" | number;\n  gasMultiplier: number;\n  initialBaseFeePerGas?: number;\n  hardfork: string;\n  mining: HardhatNetworkMiningConfig;\n  accounts: HardhatNetworkAccountsConfig;\n  blockGasLimit: number;\n  minGasPrice: bigint;\n  throwOnTransactionFailures: boolean;\n  throwOnCallFailures: boolean;\n  allowUnlimitedContractSize: boolean;\n  initialDate: string;\n  loggingEnabled: boolean;\n  forking?: HardhatNetworkForkingConfig;\n  coinbase?: string;\n  chains: HardhatNetworkChainsConfig;\n  allowBlocksWithSameTimestamp?: boolean;\n  enableTransientStorage?: boolean;\n}\n\nexport type HardhatNetworkAccountsConfig =\n  | HardhatNetworkHDAccountsConfig\n  | HardhatNetworkAccountConfig[];\n\nexport interface HardhatNetworkAccountConfig {\n  privateKey: string;\n  balance: string;\n}\n\nexport interface HardhatNetworkHDAccountsConfig {\n  mnemonic: string;\n  initialIndex: number;\n  count: number;\n  path: string;\n  accountsBalance: string;\n  passphrase: string;\n}\n\nexport interface HardhatNetworkForkingConfig {\n  enabled: boolean;\n  url: string;\n  blockNumber?: number;\n  httpHeaders?: { [name: string]: string };\n}\n\nexport interface HttpNetworkConfig {\n  chainId?: number;\n  from?: string;\n  gas: \"auto\" | number;\n  gasPrice: \"auto\" | number;\n  gasMultiplier: number;\n  url: string;\n  timeout: number;\n  httpHeaders: { [name: string]: string };\n  accounts: HttpNetworkAccountsConfig;\n}\n\nexport type HttpNetworkAccountsConfig =\n  | \"remote\"\n  | string[]\n  | HttpNetworkHDAccountsConfig;\n\nexport interface HttpNetworkHDAccountsConfig {\n  mnemonic: string;\n  initialIndex: number;\n  count: number;\n  path: string;\n  passphrase: string;\n}\n\nexport interface HardhatNetworkMiningConfig {\n  auto: boolean;\n  interval: number | [number, number];\n  mempool: HardhatNetworkMempoolConfig;\n}\n\nexport interface HardhatNetworkMiningUserConfig {\n  auto?: boolean;\n  interval?: number | [number, number];\n  mempool?: HardhatNetworkMempoolUserConfig;\n}\n\nexport interface HardhatNetworkMempoolConfig {\n  order: string; // Guaranteed at runtime to be have a valid value\n}\n\nexport interface HardhatNetworkMempoolUserConfig {\n  order?: string;\n}\n\n// Project paths config\n\nexport interface ProjectPathsUserConfig {\n  root?: string;\n  cache?: string;\n  artifacts?: string;\n  sources?: string;\n  tests?: string;\n}\n\nexport interface ProjectPathsConfig {\n  root: string;\n  configFile: string;\n  cache: string;\n  artifacts: string;\n  sources: string;\n  tests: string;\n}\n\n// Solidity config\n\n// Note that the user config SolidityUserConfig is more complex than the resolved config SolidityConfig\nexport type SolidityUserConfig = string | SolcUserConfig | MultiSolcUserConfig;\n\nexport interface SolcUserConfig {\n  version: string;\n  settings?: any;\n}\n\nexport interface MultiSolcUserConfig {\n  compilers: SolcUserConfig[];\n  overrides?: Record<string, SolcUserConfig>;\n}\n\nexport interface SolcConfig {\n  version: string;\n  settings: any;\n}\n\nexport interface SolidityConfig {\n  compilers: SolcConfig[];\n  overrides: Record<string, SolcConfig>;\n}\n\n// Hardhat config\n\nexport interface HardhatUserConfig {\n  defaultNetwork?: string;\n  paths?: ProjectPathsUserConfig;\n  networks?: NetworksUserConfig;\n  solidity?: SolidityUserConfig;\n  mocha?: Mocha.MochaOptions;\n}\n\nexport interface HardhatConfig {\n  defaultNetwork: string;\n  paths: ProjectPathsConfig;\n  networks: NetworksConfig;\n  solidity: SolidityConfig;\n  mocha: Mocha.MochaOptions;\n}\n\n// Plugins config functionality\n\nexport type ConfigExtender = (\n  config: HardhatConfig,\n  userConfig: Readonly<HardhatUserConfig>\n) => void;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}