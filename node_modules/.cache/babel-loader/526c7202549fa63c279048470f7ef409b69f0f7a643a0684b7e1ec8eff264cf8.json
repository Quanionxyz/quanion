{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCellInRange = exports.areCellEqual = exports.calculateRangeCoordinate = exports.flatten = exports.extractTruncates = exports.sumArray = exports.sequence = exports.distributeUnevenly = exports.countSpaceSequence = exports.groupBySizes = exports.makeBorderConfig = exports.splitAnsi = exports.normalizeString = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst string_width_1 = __importDefault(require(\"string-width\"));\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\nconst getBorderCharacters_1 = require(\"./getBorderCharacters\");\n/**\n * Converts Windows-style newline to Unix-style\n *\n * @internal\n */\nconst normalizeString = input => {\n  return input.replace(/\\r\\n/g, '\\n');\n};\nexports.normalizeString = normalizeString;\n/**\n * Splits ansi string by newlines\n *\n * @internal\n */\nconst splitAnsi = input => {\n  const lengths = (0, strip_ansi_1.default)(input).split('\\n').map(string_width_1.default);\n  const result = [];\n  let startIndex = 0;\n  lengths.forEach(length => {\n    result.push(length === 0 ? '' : (0, slice_ansi_1.default)(input, startIndex, startIndex + length));\n    // Plus 1 for the newline character itself\n    startIndex += length + 1;\n  });\n  return result;\n};\nexports.splitAnsi = splitAnsi;\n/**\n * Merges user provided border characters with the default border (\"honeywell\") characters.\n *\n * @internal\n */\nconst makeBorderConfig = border => {\n  return {\n    ...(0, getBorderCharacters_1.getBorderCharacters)('honeywell'),\n    ...border\n  };\n};\nexports.makeBorderConfig = makeBorderConfig;\n/**\n * Groups the array into sub-arrays by sizes.\n *\n * @internal\n * @example\n * groupBySizes(['a', 'b', 'c', 'd', 'e'], [2, 1, 2]) = [ ['a', 'b'], ['c'], ['d', 'e'] ]\n */\nconst groupBySizes = (array, sizes) => {\n  let startIndex = 0;\n  return sizes.map(size => {\n    const group = array.slice(startIndex, startIndex + size);\n    startIndex += size;\n    return group;\n  });\n};\nexports.groupBySizes = groupBySizes;\n/**\n * Counts the number of continuous spaces in a string\n *\n * @internal\n * @example\n * countGroupSpaces('a  bc  de f') = 3\n */\nconst countSpaceSequence = input => {\n  var _a, _b;\n  return (_b = (_a = input.match(/\\s+/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n};\nexports.countSpaceSequence = countSpaceSequence;\n/**\n * Creates the non-increasing number array given sum and length\n * whose the difference between maximum and minimum is not greater than 1\n *\n * @internal\n * @example\n * distributeUnevenly(6, 3) = [2, 2, 2]\n * distributeUnevenly(8, 3) = [3, 3, 2]\n */\nconst distributeUnevenly = (sum, length) => {\n  const result = Array.from({\n    length\n  }).fill(Math.floor(sum / length));\n  return result.map((element, index) => {\n    return element + (index < sum % length ? 1 : 0);\n  });\n};\nexports.distributeUnevenly = distributeUnevenly;\nconst sequence = (start, end) => {\n  return Array.from({\n    length: end - start + 1\n  }, (_, index) => {\n    return index + start;\n  });\n};\nexports.sequence = sequence;\nconst sumArray = array => {\n  return array.reduce((accumulator, element) => {\n    return accumulator + element;\n  }, 0);\n};\nexports.sumArray = sumArray;\nconst extractTruncates = config => {\n  return config.columns.map(({\n    truncate\n  }) => {\n    return truncate;\n  });\n};\nexports.extractTruncates = extractTruncates;\nconst flatten = array => {\n  return [].concat(...array);\n};\nexports.flatten = flatten;\nconst calculateRangeCoordinate = spanningCellConfig => {\n  const {\n    row,\n    col,\n    colSpan = 1,\n    rowSpan = 1\n  } = spanningCellConfig;\n  return {\n    bottomRight: {\n      col: col + colSpan - 1,\n      row: row + rowSpan - 1\n    },\n    topLeft: {\n      col,\n      row\n    }\n  };\n};\nexports.calculateRangeCoordinate = calculateRangeCoordinate;\nconst areCellEqual = (cell1, cell2) => {\n  return cell1.row === cell2.row && cell1.col === cell2.col;\n};\nexports.areCellEqual = areCellEqual;\nconst isCellInRange = (cell, {\n  topLeft,\n  bottomRight\n}) => {\n  return topLeft.row <= cell.row && cell.row <= bottomRight.row && topLeft.col <= cell.col && cell.col <= bottomRight.col;\n};\nexports.isCellInRange = isCellInRange;","map":{"version":3,"names":["slice_ansi_1","__importDefault","require","string_width_1","strip_ansi_1","getBorderCharacters_1","normalizeString","input","replace","exports","splitAnsi","lengths","default","split","map","result","startIndex","forEach","length","push","makeBorderConfig","border","getBorderCharacters","groupBySizes","array","sizes","size","group","slice","countSpaceSequence","_b","_a","match","distributeUnevenly","sum","Array","from","fill","Math","floor","element","index","sequence","start","end","_","sumArray","reduce","accumulator","extractTruncates","config","columns","truncate","flatten","concat","calculateRangeCoordinate","spanningCellConfig","row","col","colSpan","rowSpan","bottomRight","topLeft","areCellEqual","cell1","cell2","isCellInRange","cell"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}