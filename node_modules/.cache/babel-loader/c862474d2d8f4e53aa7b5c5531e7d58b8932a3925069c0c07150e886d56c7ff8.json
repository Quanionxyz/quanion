{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@quais/abi\";\nimport { Provider } from \"@quais/abstract-provider\";\nimport { Signer, VoidSigner } from \"@quais/abstract-signer\";\nimport { getAddress, getContractAddress, getShardFromAddress } from \"@quais/address\";\nimport { BigNumber } from \"@quais/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@quais/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@quais/properties\";\nimport { accessListify } from \"@quais/transactions\";\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nimport { randomBytes } from \"crypto\";\nconst logger = new Logger(version);\n///////////////////////////////\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true,\n  ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = yield nameOrPromise;\n    if (typeof name !== \"string\") {\n      logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n    // If it is already an address, just use it (after adding checksum)\n    try {\n      return getAddress(name);\n    } catch (error) {}\n    if (!resolver) {\n      logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resolveName\"\n      });\n    }\n    const address = yield resolver.resolveName(name);\n    if (address == null) {\n      logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n    return address;\n  });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (Array.isArray(paramType)) {\n      return yield Promise.all(paramType.map((paramType, index) => {\n        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n      }));\n    }\n    if (paramType.type === \"address\") {\n      return yield resolveName(resolver, value);\n    }\n    if (paramType.type === \"tuple\") {\n      return yield resolveAddresses(resolver, value, paramType.components);\n    }\n    if (paramType.baseType === \"array\") {\n      if (!Array.isArray(value)) {\n        return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"value\",\n          value\n        }));\n      }\n      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n    return value;\n  });\n}\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If an extra argument is given, it is overrides\n    let overrides = {};\n    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      overrides = shallowCopy(args.pop());\n    }\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n      if (overrides.from) {\n        // Contracts with a Signer are from the Signer's frame-of-reference;\n        // but we allow overriding \"from\" if it matches the signer\n        overrides.from = resolveProperties({\n          override: resolveName(contract.signer, overrides.from),\n          signer: contract.signer.getAddress()\n        }).then(check => __awaiter(this, void 0, void 0, function* () {\n          if (getAddress(check.signer) !== check.override) {\n            logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides.from\"\n            });\n          }\n          return check.override;\n        }));\n      } else {\n        overrides.from = contract.signer.getAddress();\n      }\n    } else if (overrides.from) {\n      overrides.from = resolveName(contract.provider, overrides.from);\n      //} else {\n      // Contracts without a signer can override \"from\", and if\n      // unspecified the zero address is used\n      //overrides.from = AddressZero;\n    }\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = yield resolveProperties({\n      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n      address: contract.resolvedAddress,\n      overrides: resolveProperties(overrides) || {}\n    });\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx = {\n      data: data,\n      to: resolved.address\n    };\n    // Resolved Overrides\n    const ro = resolved.overrides;\n    // Populate simple overrides\n    if (ro.nonce != null) {\n      tx.nonce = BigNumber.from(ro.nonce).toNumber();\n    }\n    if (ro.gasLimit != null) {\n      tx.gasLimit = BigNumber.from(ro.gasLimit);\n    }\n    if (ro.gasPrice != null) {\n      tx.gasPrice = BigNumber.from(ro.gasPrice);\n    }\n    if (ro.maxFeePerGas != null) {\n      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n    }\n    if (ro.maxPriorityFeePerGas != null) {\n      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n    }\n    if (ro.from != null) {\n      tx.from = ro.from;\n    }\n    if (ro.type != null) {\n      tx.type = ro.type;\n    }\n    if (ro.accessList != null) {\n      tx.accessList = accessListify(ro.accessList);\n    }\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n      // Compute the intrinsic gas cost for this transaction\n      // @TODO: This is based on the yellow paper as of Petersburg; this is something\n      // we may wish to parameterize in v6 as part of the Network object. Since this\n      // is always a non-nil to address, we can ignore G_create, but may wish to add\n      // similar logic to the ContractFactory.\n      let intrinsic = 21000;\n      const bytes = arrayify(data);\n      for (let i = 0; i < bytes.length; i++) {\n        intrinsic += 4;\n        if (bytes[i]) {\n          intrinsic += 64;\n        }\n      }\n      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n    // Populate \"value\" override\n    if (ro.value) {\n      const roValue = BigNumber.from(ro.value);\n      if (!roValue.isZero() && !fragment.payable) {\n        logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: overrides.value\n        });\n      }\n      tx.value = roValue;\n    }\n    if (ro.customData) {\n      tx.customData = shallowCopy(ro.customData);\n    }\n    if (ro.ccipReadEnabled) {\n      tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n    delete overrides.type;\n    delete overrides.accessList;\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);\n    if (leftovers.length) {\n      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"overrides\",\n        overrides: leftovers\n      });\n    }\n    return tx;\n  });\n}\nfunction buildPopulate(contract, fragment) {\n  return function (...args) {\n    return populateTransaction(contract, fragment, args);\n  };\n}\nfunction buildEstimate(contract, fragment) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!signerOrProvider) {\n        logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"estimateGas\"\n        });\n      }\n      const tx = yield populateTransaction(contract, fragment, args);\n      return yield signerOrProvider.estimateGas(tx);\n    });\n  };\n}\nfunction addContractWait(contract, tx) {\n  const wait = tx.wait.bind(tx);\n  tx.wait = confirmations => {\n    return wait(confirmations).then(receipt => {\n      receipt.events = receipt.logs.map(log => {\n        let event = deepCopy(log);\n        let parsed = null;\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {}\n        // Successfully parsed the event log; include it\n        if (parsed) {\n          event.args = parsed.args;\n          event.decode = (data, topics) => {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        }\n        // Useful operations\n        event.removeListener = () => {\n          return contract.provider;\n        };\n        event.getBlock = () => {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n        event.getTransaction = () => {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n        event.getTransactionReceipt = () => {\n          return Promise.resolve(receipt);\n        };\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Extract the \"blockTag\" override if present\n      let blockTag = undefined;\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        const overrides = shallowCopy(args.pop());\n        if (overrides.blockTag != null) {\n          blockTag = yield overrides.blockTag;\n        }\n        delete overrides.blockTag;\n        args.push(overrides);\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed(blockTag);\n      }\n      // Call a node and get the result\n      const tx = yield populateTransaction(contract, fragment, args);\n      const result = yield signerOrProvider.call(tx, blockTag);\n      try {\n        let value = contract.interface.decodeFunctionResult(fragment, result);\n        if (collapseSimple && fragment.outputs.length === 1) {\n          value = value[0];\n        }\n        return value;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          error.address = contract.address;\n          error.args = args;\n          error.transaction = tx;\n        }\n        throw error;\n      }\n    });\n  };\n}\nfunction buildSend(contract, fragment) {\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!contract.signer) {\n        logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction\"\n        });\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed();\n      }\n      const txRequest = yield populateTransaction(contract, fragment, args);\n      const tx = yield contract.signer.sendTransaction(txRequest);\n      // Tweak the tx.wait so the receipt has extra properties\n      addContractWait(contract, tx);\n      return tx;\n    });\n  };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(topic => {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n    return topic;\n  }).join(\":\") : \"\");\n}\nclass RunningEvent {\n  constructor(tag, filter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n  addListener(listener, once) {\n    this._listeners.push({\n      listener: listener,\n      once: once\n    });\n  }\n  removeListener(listener) {\n    let done = false;\n    this._listeners = this._listeners.filter(item => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n      done = true;\n      return false;\n    });\n  }\n  removeAllListeners() {\n    this._listeners = [];\n  }\n  listeners() {\n    return this._listeners.map(i => i.listener);\n  }\n  listenerCount() {\n    return this._listeners.length;\n  }\n  run(args) {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter(item => {\n      const argsCopy = args.slice();\n      // Call the callback in the next event loop\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0);\n      // Reschedule it if it not \"once\"\n      return !item.once;\n    });\n    return listenerCount;\n  }\n  prepareEvent(event) {}\n  // Returns the array that will be applied to an emit\n  getEmit(event) {\n    return [event];\n  }\n}\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n  constructor(address, contractInterface, fragment, topics) {\n    const filter = {\n      address: address\n    };\n    let topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n    event.decode = (data, topics) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n    try {\n      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n  getEmit(event) {\n    const errors = checkResultErrors(event.args);\n    if (errors.length) {\n      throw errors[0].error;\n    }\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n  constructor(address, contractInterface) {\n    super(\"*\", {\n      address: address\n    });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n      event.decode = (data, topics) => {\n        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n      };\n      event.args = parsed.args;\n    } catch (error) {\n      // No matching event\n    }\n  }\n}\nexport class BaseContract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      const uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(eventSignature => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, (...args) => {\n          return {\n            address: this.address,\n            topics: this.interface.encodeFilterTopics(event, args)\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(name => {\n        const filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n    // Swallow bad ENS names to prevent Unhandled Exceptions\n    this.resolvedAddress.catch(e => {});\n    const uniqueNames = {};\n    const uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(signature => {\n      const fragment = this.interface.functions[signature];\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n        return;\n      }\n      uniqueSignatures[signature] = true;\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        const name = fragment.name;\n        if (!uniqueNames[`%${name}`]) {\n          uniqueNames[`%${name}`] = [];\n        }\n        uniqueNames[`%${name}`].push(signature);\n      }\n      if (this[signature] == null) {\n        defineReadOnly(this, signature, buildDefault(this, fragment, true));\n      }\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (this.functions[signature] == null) {\n        defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n      }\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n      }\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n      }\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(name => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n      // Strip off the leading \"%\" used for prototype protection\n      name = name.substring(1);\n      const signature = signatures[0];\n      // If overwriting a member property that is null, swallow the error\n      try {\n        if (this[name] == null) {\n          defineReadOnly(this, name, this[signature]);\n        }\n      } catch (e) {}\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n      }\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction.from, transaction.nonce, transaction.data);\n  }\n  static getInterface(contractInterface) {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n    return new Interface(contractInterface);\n  }\n  // @TODO: Allow timeout?\n  deployed() {\n    return this._deployed();\n  }\n  _deployed(blockTag) {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {\n          if (code === \"0x\") {\n            logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n              contractAddress: this.address,\n              operation: \"getDeployed\"\n            });\n          }\n          return this;\n        });\n      }\n    }\n    return this._deployedPromise;\n  }\n  // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n  fallback(overrides) {\n    if (!this.signer) {\n      logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"sendTransaction(fallback)\"\n      });\n    }\n    const tx = shallowCopy(overrides || {});\n    [\"from\", \"to\"].forEach(function (key) {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  }\n  // Reconnect to a different signer or provider\n  connect(signerOrProvider) {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n    const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n    return contract;\n  }\n  // Re-attach to a different on-chain instance of this contract\n  attach(addressOrName) {\n    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n  }\n  static isIndexed(value) {\n    return Indexed.isIndexed(value);\n  }\n  _normalizeRunningEvent(runningEvent) {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n    return runningEvent;\n  }\n  _getRunningEvent(eventName) {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      }\n      // Listen for any event that is registered\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      }\n      // Listen for any event\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      }\n      // Get the event Fragment (throws if ambiguous/unknown event)\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n    }\n    // We have topics to filter by...\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n      } catch (error) {}\n      // Filter by the unknown topichash\n      const filter = {\n        address: this.address,\n        topics: eventName.topics\n      };\n      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n    }\n    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n  }\n  _checkRunningEvents(runningEvent) {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag];\n      // If we have a poller for this, remove it\n      const emit = this._wrappedEmits[runningEvent.tag];\n      if (emit && runningEvent.filter) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  }\n  // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n  _wrapEvent(runningEvent, log, listener) {\n    const event = deepCopy(log);\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n    };\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    };\n    // This may throw if the topics and data mismatch the signature\n    runningEvent.prepareEvent(event);\n    return event;\n  }\n  _addEventListener(runningEvent, listener, once) {\n    if (!this.provider) {\n      logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"once\"\n      });\n    }\n    runningEvent.addListener(listener, once);\n    // Track this running event and its listeners (may already be there; but no hard in updating)\n    this._runningEvents[runningEvent.tag] = runningEvent;\n    // If we are not polling the provider, start polling\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = log => {\n        let event = this._wrapEvent(runningEvent, log, listener);\n        // Try to emit the result for the parameterized event...\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        }\n        // Always emit \"event\" for fragment-base events\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        }\n        // Emit \"error\" if there was an error\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n      // Special events, like \"error\" do not have a filter\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n  queryFilter(event, fromBlockOrBlockhash, toBlock) {\n    const runningEvent = this._getRunningEvent(event);\n    const filter = shallowCopy(runningEvent.filter);\n    if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n      }\n      filter.blockHash = fromBlockOrBlockhash;\n    } else {\n      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      filter.toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n    return this.provider.getLogs(filter).then(logs => {\n      return logs.map(log => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n  on(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n    return this;\n  }\n  once(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n    return this;\n  }\n  emit(eventName, ...args) {\n    if (!this.provider) {\n      return false;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    const result = runningEvent.run(args) > 0;\n    // May have drained all the \"once\" events; check for living events\n    this._checkRunningEvents(runningEvent);\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!this.provider) {\n      return 0;\n    }\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n  listeners(eventName) {\n    if (!this.provider) {\n      return [];\n    }\n    if (eventName == null) {\n      const result = [];\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach(listener => {\n          result.push(listener);\n        });\n      }\n      return result;\n    }\n    return this._getRunningEvent(eventName).listeners();\n  }\n  removeAllListeners(eventName) {\n    if (!this.provider) {\n      return this;\n    }\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n      }\n      return this;\n    }\n    // Delete any listeners\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeAllListeners();\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  off(eventName, listener) {\n    if (!this.provider) {\n      return this;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeListener(listener);\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n}\nexport class Contract extends BaseContract {}\nexport class ContractFactory {\n  constructor(contractInterface, bytecode, signer) {\n    let bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n  // @TODO: Future; rename to populateTransaction?\n  getDeployTransaction(...args) {\n    let tx = {};\n    // If we have 1 additional argument, we allow transaction overrides\n    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      tx = shallowCopy(args.pop());\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    }\n    // Do not allow these to be overridden in a deployment transaction\n    [\"data\", \"from\", \"to\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    if (tx.value) {\n      const value = BigNumber.from(tx.value);\n      if (!value.isZero() && !this.interface.deploy.payable) {\n        logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: tx.value\n        });\n      }\n    }\n    // Make sure the call matches the constructor signature\n    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n    // Set the data to the bytecode + the encoded constructor arguments\n    tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n    return tx;\n  }\n  deploy(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let overrides = {};\n      // If 1 extra parameter was passed in, it contains overrides\n      if (args.length === this.interface.deploy.inputs.length + 1) {\n        overrides = args.pop();\n      }\n      // Make sure the call matches the constructor signature\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n      // Resolve ENS names and promises in the arguments\n      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n      params.push(overrides);\n      // Get the deployment transaction (with optional overrides)\n      const unsignedTx = this.getDeployTransaction(...params);\n      const grindedTx = yield this.grindContractAddress(unsignedTx);\n      // Send the deployment transaction\n      const tx = yield this.signer.sendTransaction(grindedTx);\n      const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n      const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n      // Add the modified wait that wraps events\n      addContractWait(contract, tx);\n      defineReadOnly(contract, \"deployTransaction\", tx);\n      return contract;\n    });\n  }\n  attach(address) {\n    return this.constructor.getContract(address, this.interface, this.signer);\n  }\n  connect(signer) {\n    return new this.constructor(this.interface, this.bytecode, signer);\n  }\n  static fromSolidity(compilerOutput, signer) {\n    if (compilerOutput == null) {\n      logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n        argument: \"compilerOutput\"\n      });\n    }\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n    const abi = compilerOutput.abi;\n    let bytecode = null;\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n    return new this(abi, bytecode, signer);\n  }\n  static getInterface(contractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction.from, transaction.nonce, transaction.data);\n  }\n  static getContract(address, contractInterface, signer) {\n    return new Contract(address, contractInterface, signer);\n  }\n  grindContractAddress(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (tx.nonce == null) {\n        tx.nonce = yield this.signer.getTransactionCount(\"pending\");\n      }\n      const sender = yield this.signer.getAddress();\n      const toShard = getShardFromAddress(sender);\n      var i = 0;\n      var startingData = tx.data;\n      while (i < 10000) {\n        var contractAddress = getContractAddress(sender, tx.nonce, tx.data);\n        var contractShard = getShardFromAddress(contractAddress);\n        if (contractShard === toShard) {\n          return tx;\n        }\n        var salt = randomBytes(32);\n        tx.data = hexlify(concat([startingData, salt]));\n        i++;\n      }\n      logger.throwError(\"unable to find salt for contract deployment\", Logger.errors.TIMEOUT);\n      return tx;\n    });\n  }\n}","map":{"version":3,"names":["checkResultErrors","Indexed","Interface","Provider","Signer","VoidSigner","getAddress","getContractAddress","getShardFromAddress","BigNumber","arrayify","concat","hexlify","isBytes","isHexString","defineReadOnly","deepCopy","getStatic","resolveProperties","shallowCopy","accessListify","Logger","version","randomBytes","logger","allowedTransactionKeys","chainId","data","from","gasLimit","gasPrice","nonce","to","value","type","accessList","maxFeePerGas","maxPriorityFeePerGas","customData","ccipReadEnabled","resolveName","resolver","nameOrPromise","name","throwArgumentError","error","throwError","errors","UNSUPPORTED_OPERATION","operation","address","resolveAddresses","paramType","Array","isArray","Promise","all","map","index","components","baseType","reject","makeError","INVALID_ARGUMENT","argument","v","arrayChildren","populateTransaction","contract","fragment","args","overrides","length","inputs","pop","checkArgumentCount","signer","override","then","check","__awaiter","provider","resolved","resolvedAddress","interface","encodeFunctionData","tx","ro","toNumber","gas","intrinsic","bytes","i","add","roValue","isZero","payable","leftovers","Object","keys","filter","key","l","JSON","stringify","join","buildPopulate","buildEstimate","signerOrProvider","estimateGas","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","e","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","blockTag","undefined","push","deployTransaction","_deployed","result","call","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","buildSend","txRequest","sendTransaction","buildDefault","constant","getEventTag","topic","RunningEvent","constructor","tag","_listeners","addListener","listener","once","done","item","removeAllListeners","listeners","listenerCount","run","argsCopy","slice","setTimeout","apply","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","getEventTopic","format","decodeError","WildcardRunningEvent","BaseContract","addressOrName","new","target","isSigner","isProvider","uniqueFilters","forEach","filters","encodeFilterTopics","warn","catch","uniqueNames","uniqueSignatures","functions","callStatic","signatures","substring","getInterface","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","getEvent","Error","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","reduce","accum","Contract","ContractFactory","bytecode","bytecodeHex","object","getDeployTransaction","deploy","encodeDeploy","params","unsignedTx","grindedTx","grindContractAddress","getContract","fromSolidity","compilerOutput","MISSING_ARGUMENT","parse","abi","evm","getTransactionCount","sender","toShard","startingData","contractShard","salt","TIMEOUT"],"sources":["/workspace/quanion/node_modules/@quais/contracts/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n  checkResultErrors,\n  EventFragment,\n  Fragment,\n  FunctionFragment,\n  Indexed,\n  Interface,\n  JsonFragment,\n  LogDescription,\n  ParamType,\n  Result,\n} from \"@quais/abi\";\nimport {\n  Block,\n  BlockTag,\n  Filter,\n  FilterByBlockHash,\n  Listener,\n  Log,\n  Provider,\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse,\n} from \"@quais/abstract-provider\";\nimport { Signer, VoidSigner } from \"@quais/abstract-signer\";\nimport {\n  getAddress,\n  getContractAddress,\n  getShardFromAddress,\n} from \"@quais/address\";\nimport { BigNumber, BigNumberish } from \"@quais/bignumber\";\nimport {\n  arrayify,\n  BytesLike,\n  concat,\n  hexlify,\n  isBytes,\n  isHexString,\n} from \"@quais/bytes\";\nimport {\n  Deferrable,\n  defineReadOnly,\n  deepCopy,\n  getStatic,\n  resolveProperties,\n  shallowCopy,\n} from \"@quais/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@quais/transactions\";\n\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nimport { randomBytes } from \"crypto\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n  gasLimit?: BigNumberish | Promise<BigNumberish>;\n  gasPrice?: BigNumberish | Promise<BigNumberish>;\n  maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n  maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n  nonce?: BigNumberish | Promise<BigNumberish>;\n  type?: number;\n  accessList?: AccessListish;\n  customData?: Record<string, any>;\n  ccipReadEnabled?: boolean;\n}\n\nexport interface PayableOverrides extends Overrides {\n  value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n  blockTag?: BlockTag | Promise<BlockTag>;\n  from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n  to?: string;\n  from?: string;\n  nonce?: number;\n\n  gasLimit?: BigNumber;\n  gasPrice?: BigNumber;\n\n  data?: string;\n  value?: BigNumber;\n  chainId?: number;\n\n  type?: number;\n  accessList?: AccessList;\n\n  maxFeePerGas?: BigNumber;\n  maxPriorityFeePerGas?: BigNumber;\n\n  customData?: Record<string, any>;\n  ccipReadEnabled?: boolean;\n}\n\nexport type EventFilter = {\n  address?: string;\n  topics?: Array<string | Array<string>>;\n};\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n  // The event name\n  event?: string;\n\n  // The event signature\n  eventSignature?: string;\n\n  // The parsed arguments to the event\n  args?: Result;\n\n  // If parsing the arguments failed, this is the error\n  decodeError?: Error;\n\n  // A function that can be used to decode event data and topics\n  decode?: (data: string, topics?: Array<string>) => any;\n\n  // A function that will remove the listener responsible for this event (if any)\n  removeListener: () => void;\n\n  // Get blockchain details about this event's block and transaction\n  getBlock: () => Promise<Block>;\n  getTransaction: () => Promise<TransactionResponse>;\n  getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n  events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n  wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [key: string]: boolean } = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true,\n  ccipReadEnabled: true,\n};\n\nasync function resolveName(\n  resolver: Signer | Provider,\n  nameOrPromise: string | Promise<string>\n): Promise<string> {\n  const name = await nameOrPromise;\n\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n  }\n\n  // If it is already an address, just use it (after adding checksum)\n  try {\n    return getAddress(name);\n  } catch (error) {}\n\n  if (!resolver) {\n    logger.throwError(\n      \"a provider or signer is needed to resolve ENS names\",\n      Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        operation: \"resolveName\",\n      }\n    );\n  }\n\n  const address = await resolver.resolveName(name);\n\n  if (address == null) {\n    logger.throwArgumentError(\n      \"resolver or addr is not configured for ENS name\",\n      \"name\",\n      name\n    );\n  }\n\n  return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(\n  resolver: Signer | Provider,\n  value: any,\n  paramType: ParamType | Array<ParamType>\n): Promise<any> {\n  if (Array.isArray(paramType)) {\n    return await Promise.all(\n      paramType.map((paramType, index) => {\n        return resolveAddresses(\n          resolver,\n          Array.isArray(value) ? value[index] : value[paramType.name],\n          paramType\n        );\n      })\n    );\n  }\n\n  if (paramType.type === \"address\") {\n    return await resolveName(resolver, value);\n  }\n\n  if (paramType.type === \"tuple\") {\n    return await resolveAddresses(resolver, value, paramType.components);\n  }\n\n  if (paramType.baseType === \"array\") {\n    if (!Array.isArray(value)) {\n      return Promise.reject(\n        logger.makeError(\n          \"invalid value for array\",\n          Logger.errors.INVALID_ARGUMENT,\n          {\n            argument: \"value\",\n            value,\n          }\n        )\n      );\n    }\n    return await Promise.all(\n      value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren))\n    );\n  }\n\n  return value;\n}\n\nasync function populateTransaction(\n  contract: Contract,\n  fragment: FunctionFragment,\n  args: Array<any>\n): Promise<PopulatedTransaction> {\n  // If an extra argument is given, it is overrides\n  let overrides: CallOverrides = {};\n  if (\n    args.length === fragment.inputs.length + 1 &&\n    typeof args[args.length - 1] === \"object\"\n  ) {\n    overrides = shallowCopy(args.pop());\n  }\n\n  // Make sure the parameter count matches\n  logger.checkArgumentCount(\n    args.length,\n    fragment.inputs.length,\n    \"passed to contract\"\n  );\n\n  // Populate \"from\" override (allow promises)\n  if (contract.signer) {\n    if (overrides.from) {\n      // Contracts with a Signer are from the Signer's frame-of-reference;\n      // but we allow overriding \"from\" if it matches the signer\n      overrides.from = resolveProperties({\n        override: resolveName(contract.signer, overrides.from),\n        signer: contract.signer.getAddress(),\n      }).then(async (check) => {\n        if (getAddress(check.signer) !== check.override) {\n          logger.throwError(\n            \"Contract with a Signer cannot override from\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            {\n              operation: \"overrides.from\",\n            }\n          );\n        }\n\n        return check.override;\n      });\n    } else {\n      overrides.from = contract.signer.getAddress();\n    }\n  } else if (overrides.from) {\n    overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n    // Contracts without a signer can override \"from\", and if\n    // unspecified the zero address is used\n    //overrides.from = AddressZero;\n  }\n\n  // Wait for all dependencies to be resolved (prefer the signer over the provider)\n  const resolved = await resolveProperties({\n    args: resolveAddresses(\n      contract.signer || contract.provider,\n      args,\n      fragment.inputs\n    ),\n    address: contract.resolvedAddress,\n    overrides: resolveProperties(overrides) || {},\n  });\n\n  // The ABI coded transaction\n  const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n  const tx: PopulatedTransaction = {\n    data: data,\n    to: resolved.address,\n  };\n\n  // Resolved Overrides\n  const ro = resolved.overrides;\n\n  // Populate simple overrides\n  if (ro.nonce != null) {\n    tx.nonce = BigNumber.from(ro.nonce).toNumber();\n  }\n  if (ro.gasLimit != null) {\n    tx.gasLimit = BigNumber.from(ro.gasLimit);\n  }\n  if (ro.gasPrice != null) {\n    tx.gasPrice = BigNumber.from(ro.gasPrice);\n  }\n  if (ro.maxFeePerGas != null) {\n    tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n  }\n  if (ro.maxPriorityFeePerGas != null) {\n    tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n  }\n  if (ro.from != null) {\n    tx.from = ro.from;\n  }\n\n  if (ro.type != null) {\n    tx.type = ro.type;\n  }\n  if (ro.accessList != null) {\n    tx.accessList = accessListify(ro.accessList);\n  }\n\n  // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n  if (tx.gasLimit == null && fragment.gas != null) {\n    // Compute the intrinsic gas cost for this transaction\n    // @TODO: This is based on the yellow paper as of Petersburg; this is something\n    // we may wish to parameterize in v6 as part of the Network object. Since this\n    // is always a non-nil to address, we can ignore G_create, but may wish to add\n    // similar logic to the ContractFactory.\n    let intrinsic = 21000;\n    const bytes = arrayify(data);\n    for (let i = 0; i < bytes.length; i++) {\n      intrinsic += 4;\n      if (bytes[i]) {\n        intrinsic += 64;\n      }\n    }\n    tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n  }\n\n  // Populate \"value\" override\n  if (ro.value) {\n    const roValue = BigNumber.from(ro.value);\n    if (!roValue.isZero() && !fragment.payable) {\n      logger.throwError(\n        \"non-payable method cannot override value\",\n        Logger.errors.UNSUPPORTED_OPERATION,\n        {\n          operation: \"overrides.value\",\n          value: overrides.value,\n        }\n      );\n    }\n    tx.value = roValue;\n  }\n\n  if (ro.customData) {\n    tx.customData = shallowCopy(ro.customData);\n  }\n\n  if (ro.ccipReadEnabled) {\n    tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n  }\n\n  // Remove the overrides\n  delete overrides.nonce;\n  delete overrides.gasLimit;\n  delete overrides.gasPrice;\n  delete overrides.from;\n  delete overrides.value;\n\n  delete overrides.type;\n  delete overrides.accessList;\n\n  delete overrides.maxFeePerGas;\n  delete overrides.maxPriorityFeePerGas;\n\n  delete overrides.customData;\n  delete overrides.ccipReadEnabled;\n\n  // Make sure there are no stray overrides, which may indicate a\n  // typo or using an unsupported key.\n  const leftovers = Object.keys(overrides).filter(\n    (key) => (<any>overrides)[key] != null\n  );\n  if (leftovers.length) {\n    logger.throwError(\n      `cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`,\n      Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        operation: \"overrides\",\n        overrides: leftovers,\n      }\n    );\n  }\n\n  return tx;\n}\n\nfunction buildPopulate(\n  contract: Contract,\n  fragment: FunctionFragment\n): ContractFunction<PopulatedTransaction> {\n  return function (...args: Array<any>): Promise<PopulatedTransaction> {\n    return populateTransaction(contract, fragment, args);\n  };\n}\n\nfunction buildEstimate(\n  contract: Contract,\n  fragment: FunctionFragment\n): ContractFunction<BigNumber> {\n  const signerOrProvider = contract.signer || contract.provider;\n  return async function (...args: Array<any>): Promise<BigNumber> {\n    if (!signerOrProvider) {\n      logger.throwError(\n        \"estimate require a provider or signer\",\n        Logger.errors.UNSUPPORTED_OPERATION,\n        {\n          operation: \"estimateGas\",\n        }\n      );\n    }\n\n    const tx = await populateTransaction(contract, fragment, args);\n    return await signerOrProvider.estimateGas(tx);\n  };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n  const wait = tx.wait.bind(tx);\n  tx.wait = (confirmations?: number) => {\n    return wait(confirmations).then((receipt: ContractReceipt) => {\n      receipt.events = receipt.logs.map((log) => {\n        let event: Event = <Event>deepCopy(log);\n        let parsed: LogDescription = null;\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {}\n\n        // Successfully parsed the event log; include it\n        if (parsed) {\n          event.args = parsed.args;\n          event.decode = (data: BytesLike, topics?: Array<any>) => {\n            return contract.interface.decodeEventLog(\n              parsed.eventFragment,\n              data,\n              topics\n            );\n          };\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        }\n\n        // Useful operations\n        event.removeListener = () => {\n          return contract.provider;\n        };\n        event.getBlock = () => {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n        event.getTransaction = () => {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n        event.getTransactionReceipt = () => {\n          return Promise.resolve(receipt);\n        };\n\n        return event;\n      });\n\n      return receipt;\n    });\n  };\n}\n\nfunction buildCall(\n  contract: Contract,\n  fragment: FunctionFragment,\n  collapseSimple: boolean\n): ContractFunction {\n  const signerOrProvider = contract.signer || contract.provider;\n\n  return async function (...args: Array<any>): Promise<any> {\n    // Extract the \"blockTag\" override if present\n    let blockTag = undefined;\n    if (\n      args.length === fragment.inputs.length + 1 &&\n      typeof args[args.length - 1] === \"object\"\n    ) {\n      const overrides = shallowCopy(args.pop());\n      if (overrides.blockTag != null) {\n        blockTag = await overrides.blockTag;\n      }\n      delete overrides.blockTag;\n      args.push(overrides);\n    }\n\n    // If the contract was just deployed, wait until it is mined\n    if (contract.deployTransaction != null) {\n      await contract._deployed(blockTag);\n    }\n\n    // Call a node and get the result\n    const tx = await populateTransaction(contract, fragment, args);\n    const result = await signerOrProvider.call(tx, blockTag);\n\n    try {\n      let value = contract.interface.decodeFunctionResult(fragment, result);\n      if (collapseSimple && fragment.outputs.length === 1) {\n        value = value[0];\n      }\n      return value;\n    } catch (error) {\n      if (error.code === Logger.errors.CALL_EXCEPTION) {\n        error.address = contract.address;\n        error.args = args;\n        error.transaction = tx;\n      }\n      throw error;\n    }\n  };\n}\n\nfunction buildSend(\n  contract: Contract,\n  fragment: FunctionFragment\n): ContractFunction<TransactionResponse> {\n  return async function (...args: Array<any>): Promise<TransactionResponse> {\n    if (!contract.signer) {\n      logger.throwError(\n        \"sending a transaction requires a signer\",\n        Logger.errors.UNSUPPORTED_OPERATION,\n        {\n          operation: \"sendTransaction\",\n        }\n      );\n    }\n\n    // If the contract was just deployed, wait until it is mined\n    if (contract.deployTransaction != null) {\n      await contract._deployed();\n    }\n\n    const txRequest = await populateTransaction(contract, fragment, args);\n\n    const tx = await contract.signer.sendTransaction(txRequest);\n\n    // Tweak the tx.wait so the receipt has extra properties\n    addContractWait(contract, tx);\n\n    return tx;\n  };\n}\n\nfunction buildDefault(\n  contract: Contract,\n  fragment: FunctionFragment,\n  collapseSimple: boolean\n): ContractFunction {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n\n  return (\n    (filter.address || \"*\") +\n    \"@\" +\n    (filter.topics\n      ? filter.topics\n          .map((topic) => {\n            if (Array.isArray(topic)) {\n              return topic.join(\"|\");\n            }\n            return topic;\n          })\n          .join(\":\")\n      : \"\")\n  );\n}\n\nclass RunningEvent {\n  readonly tag: string;\n  readonly filter: EventFilter;\n  private _listeners: Array<{ listener: Listener; once: boolean }>;\n\n  constructor(tag: string, filter: EventFilter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n\n  addListener(listener: Listener, once: boolean): void {\n    this._listeners.push({ listener: listener, once: once });\n  }\n\n  removeListener(listener: Listener): void {\n    let done = false;\n    this._listeners = this._listeners.filter((item) => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n      done = true;\n      return false;\n    });\n  }\n\n  removeAllListeners(): void {\n    this._listeners = [];\n  }\n\n  listeners(): Array<Listener> {\n    return this._listeners.map((i) => i.listener);\n  }\n\n  listenerCount(): number {\n    return this._listeners.length;\n  }\n\n  run(args: Array<any>): number {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter((item) => {\n      const argsCopy = args.slice();\n\n      // Call the callback in the next event loop\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0);\n\n      // Reschedule it if it not \"once\"\n      return !item.once;\n    });\n\n    return listenerCount;\n  }\n\n  prepareEvent(event: Event): void {}\n\n  // Returns the array that will be applied to an emit\n  getEmit(event: Event): Array<any> {\n    return [event];\n  }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n}\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n  readonly address: string;\n  readonly interface: Interface;\n  readonly fragment: EventFragment;\n\n  constructor(\n    address: string,\n    contractInterface: Interface,\n    fragment: EventFragment,\n    topics?: Array<string | Array<string>>\n  ) {\n    const filter: EventFilter = {\n      address: address,\n    };\n\n    let topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n\n  prepareEvent(event: Event): void {\n    super.prepareEvent(event);\n\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n\n    event.decode = (data: BytesLike, topics?: Array<string>) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n\n    try {\n      event.args = this.interface.decodeEventLog(\n        this.fragment,\n        event.data,\n        event.topics\n      );\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n\n  getEmit(event: Event): Array<any> {\n    const errors = checkResultErrors(event.args);\n    if (errors.length) {\n      throw errors[0].error;\n    }\n\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n  readonly address: string;\n  readonly interface: Interface;\n\n  constructor(address: string, contractInterface: Interface) {\n    super(\"*\", { address: address });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n\n  prepareEvent(event: Event): void {\n    super.prepareEvent(event);\n\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n\n      event.decode = (data: BytesLike, topics?: Array<string>) => {\n        return this.interface.decodeEventLog(\n          parsed.eventFragment,\n          data,\n          topics\n        );\n      };\n\n      event.args = parsed.args;\n    } catch (error) {\n      // No matching event\n    }\n  }\n}\n\nexport type ContractInterface =\n  | string\n  | ReadonlyArray<Fragment | JsonFragment | string>\n  | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\nexport class BaseContract {\n  readonly address: string;\n  readonly interface: Interface;\n\n  readonly signer: Signer;\n  readonly provider: Provider;\n\n  readonly functions: { [name: string]: ContractFunction };\n\n  readonly callStatic: { [name: string]: ContractFunction };\n  readonly estimateGas: { [name: string]: ContractFunction<BigNumber> };\n  readonly populateTransaction: {\n    [name: string]: ContractFunction<PopulatedTransaction>;\n  };\n\n  readonly filters: { [name: string]: (...args: Array<any>) => EventFilter };\n\n  // This will always be an address. This will only differ from\n  // address if an ENS name was used in the constructor\n  readonly resolvedAddress: Promise<string>;\n\n  // This is only set if the contract was created with a call to deploy\n  readonly deployTransaction: TransactionResponse;\n\n  _deployedPromise: Promise<Contract>;\n\n  // A list of RunningEvents to track listeners for each event tag\n  _runningEvents: { [eventTag: string]: RunningEvent };\n\n  // Wrapped functions to call emit and allow deregistration from the provider\n  _wrappedEmits: { [eventTag: string]: (...args: Array<any>) => void };\n\n  constructor(\n    addressOrName: string,\n    contractInterface: ContractInterface,\n    signerOrProvider?: Signer | Provider\n  ) {\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(\n      this,\n      \"interface\",\n      getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface)\n    );\n\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\n        \"invalid signer or provider\",\n        \"signerOrProvider\",\n        signerOrProvider\n      );\n    }\n\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n\n    defineReadOnly(this, \"filters\", {});\n\n    {\n      const uniqueFilters: { [name: string]: Array<string> } = {};\n      Object.keys(this.interface.events).forEach((eventSignature) => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n          return {\n            address: this.address,\n            topics: this.interface.encodeFilterTopics(event, args),\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n\n      Object.keys(uniqueFilters).forEach((name) => {\n        const filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(\n            `Duplicate definition of ${name} (${filters.join(\", \")})`\n          );\n        }\n      });\n    }\n\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n\n    if (addressOrName == null) {\n      logger.throwArgumentError(\n        \"invalid contract address or ENS name\",\n        \"addressOrName\",\n        addressOrName\n      );\n    }\n\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(\n        this,\n        \"resolvedAddress\",\n        resolveName(this.provider, addressOrName)\n      );\n    } else {\n      try {\n        defineReadOnly(\n          this,\n          \"resolvedAddress\",\n          Promise.resolve(getAddress(addressOrName))\n        );\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\n          \"provider is required to use ENS name as contract address\",\n          Logger.errors.UNSUPPORTED_OPERATION,\n          {\n            operation: \"new Contract\",\n          }\n        );\n      }\n    }\n\n    // Swallow bad ENS names to prevent Unhandled Exceptions\n    this.resolvedAddress.catch((e) => {});\n\n    const uniqueNames: { [name: string]: Array<string> } = {};\n    const uniqueSignatures: { [signature: string]: boolean } = {};\n    Object.keys(this.interface.functions).forEach((signature) => {\n      const fragment = this.interface.functions[signature];\n\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n        return;\n      }\n      uniqueSignatures[signature] = true;\n\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        const name = fragment.name;\n        if (!uniqueNames[`%${name}`]) {\n          uniqueNames[`%${name}`] = [];\n        }\n        uniqueNames[`%${name}`].push(signature);\n      }\n\n      if ((<Contract>this)[signature] == null) {\n        defineReadOnly<any, any>(\n          this,\n          signature,\n          buildDefault(this, fragment, true)\n        );\n      }\n\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (this.functions[signature] == null) {\n        defineReadOnly(\n          this.functions,\n          signature,\n          buildDefault(this, fragment, false)\n        );\n      }\n\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(\n          this.callStatic,\n          signature,\n          buildCall(this, fragment, true)\n        );\n      }\n\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(\n          this.populateTransaction,\n          signature,\n          buildPopulate(this, fragment)\n        );\n      }\n\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(\n          this.estimateGas,\n          signature,\n          buildEstimate(this, fragment)\n        );\n      }\n    });\n\n    Object.keys(uniqueNames).forEach((name) => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n\n      // Strip off the leading \"%\" used for prototype protection\n      name = name.substring(1);\n\n      const signature = signatures[0];\n\n      // If overwriting a member property that is null, swallow the error\n      try {\n        if ((<Contract>this)[name] == null) {\n          defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n        }\n      } catch (e) {}\n\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(\n          this.populateTransaction,\n          name,\n          this.populateTransaction[signature]\n        );\n      }\n\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n\n  static getContractAddress(transaction: {\n    from: string;\n    nonce: BigNumberish;\n    data: BytesLike;\n  }): string {\n    return getContractAddress(\n      transaction.from,\n      transaction.nonce,\n      transaction.data\n    );\n  }\n\n  static getInterface(contractInterface: ContractInterface): Interface {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n    return new Interface(contractInterface);\n  }\n\n  // @TODO: Allow timeout?\n  deployed(): Promise<Contract> {\n    return this._deployed();\n  }\n\n  _deployed(blockTag?: BlockTag): Promise<Contract> {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider\n          .getCode(this.address, blockTag)\n          .then((code) => {\n            if (code === \"0x\") {\n              logger.throwError(\n                \"contract not deployed\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                {\n                  contractAddress: this.address,\n                  operation: \"getDeployed\",\n                }\n              );\n            }\n            return this;\n          });\n      }\n    }\n\n    return this._deployedPromise;\n  }\n\n  // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n  fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n    if (!this.signer) {\n      logger.throwError(\n        \"sending a transactions require a signer\",\n        Logger.errors.UNSUPPORTED_OPERATION,\n        { operation: \"sendTransaction(fallback)\" }\n      );\n    }\n\n    const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n    [\"from\", \"to\"].forEach(function (key) {\n      if ((<any>tx)[key] == null) {\n        return;\n      }\n      logger.throwError(\n        \"cannot override \" + key,\n        Logger.errors.UNSUPPORTED_OPERATION,\n        { operation: key }\n      );\n    });\n\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  }\n\n  // Reconnect to a different signer or provider\n  connect(signerOrProvider: Signer | Provider | string): Contract {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n\n    const contract = new (<{ new (...args: any[]): Contract }>this.constructor)(\n      this.address,\n      this.interface,\n      signerOrProvider\n    );\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n\n    return contract;\n  }\n\n  // Re-attach to a different on-chain instance of this contract\n  attach(addressOrName: string): Contract {\n    return new (<{ new (...args: any[]): Contract }>this.constructor)(\n      addressOrName,\n      this.interface,\n      this.signer || this.provider\n    );\n  }\n\n  static isIndexed(value: any): value is Indexed {\n    return Indexed.isIndexed(value);\n  }\n\n  private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n    return runningEvent;\n  }\n\n  private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      }\n\n      // Listen for any event that is registered\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      }\n\n      // Listen for any event\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(\n          new WildcardRunningEvent(this.address, this.interface)\n        );\n      }\n\n      // Get the event Fragment (throws if ambiguous/unknown event)\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(\n        new FragmentRunningEvent(this.address, this.interface, fragment)\n      );\n    }\n\n    // We have topics to filter by...\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(\n          new FragmentRunningEvent(\n            this.address,\n            this.interface,\n            fragment,\n            eventName.topics\n          )\n        );\n      } catch (error) {}\n\n      // Filter by the unknown topichash\n      const filter: EventFilter = {\n        address: this.address,\n        topics: eventName.topics,\n      };\n\n      return this._normalizeRunningEvent(\n        new RunningEvent(getEventTag(filter), filter)\n      );\n    }\n\n    return this._normalizeRunningEvent(\n      new WildcardRunningEvent(this.address, this.interface)\n    );\n  }\n\n  _checkRunningEvents(runningEvent: RunningEvent): void {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag];\n\n      // If we have a poller for this, remove it\n      const emit = this._wrappedEmits[runningEvent.tag];\n      if (emit && runningEvent.filter) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  }\n\n  // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n  _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n    const event = <Event>deepCopy(log);\n\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n    };\n\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    };\n\n    // This may throw if the topics and data mismatch the signature\n    runningEvent.prepareEvent(event);\n\n    return event;\n  }\n\n  private _addEventListener(\n    runningEvent: RunningEvent,\n    listener: Listener,\n    once: boolean\n  ): void {\n    if (!this.provider) {\n      logger.throwError(\n        \"events require a provider or a signer with a provider\",\n        Logger.errors.UNSUPPORTED_OPERATION,\n        { operation: \"once\" }\n      );\n    }\n\n    runningEvent.addListener(listener, once);\n\n    // Track this running event and its listeners (may already be there; but no hard in updating)\n    this._runningEvents[runningEvent.tag] = runningEvent;\n\n    // If we are not polling the provider, start polling\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = (log: Log) => {\n        let event = this._wrapEvent(runningEvent, log, listener);\n\n        // Try to emit the result for the parameterized event...\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        }\n\n        // Always emit \"event\" for fragment-base events\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        }\n\n        // Emit \"error\" if there was an error\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n      // Special events, like \"error\" do not have a filter\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n\n  queryFilter(\n    event: EventFilter | string,\n    fromBlockOrBlockhash?: BlockTag | string,\n    toBlock?: BlockTag\n  ): Promise<Array<Event>> {\n    const runningEvent = this._getRunningEvent(event);\n    const filter = shallowCopy(runningEvent.filter);\n\n    if (\n      typeof fromBlockOrBlockhash === \"string\" &&\n      isHexString(fromBlockOrBlockhash, 32)\n    ) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\n          \"cannot specify toBlock with blockhash\",\n          \"toBlock\",\n          toBlock\n        );\n      }\n      (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n    } else {\n      (<Filter>filter).fromBlock =\n        fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      (<Filter>filter).toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n\n    return this.provider.getLogs(filter).then((logs) => {\n      return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n\n  on(event: EventFilter | string, listener: Listener): this {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n    return this;\n  }\n\n  once(event: EventFilter | string, listener: Listener): this {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n    return this;\n  }\n\n  emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n    if (!this.provider) {\n      return false;\n    }\n\n    const runningEvent = this._getRunningEvent(eventName);\n    const result = runningEvent.run(args) > 0;\n\n    // May have drained all the \"once\" events; check for living events\n    this._checkRunningEvents(runningEvent);\n\n    return result;\n  }\n\n  listenerCount(eventName?: EventFilter | string): number {\n    if (!this.provider) {\n      return 0;\n    }\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n\n  listeners(eventName?: EventFilter | string): Array<Listener> {\n    if (!this.provider) {\n      return [];\n    }\n\n    if (eventName == null) {\n      const result: Array<Listener> = [];\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach((listener) => {\n          result.push(listener);\n        });\n      }\n      return result;\n    }\n\n    return this._getRunningEvent(eventName).listeners();\n  }\n\n  removeAllListeners(eventName?: EventFilter | string): this {\n    if (!this.provider) {\n      return this;\n    }\n\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n      }\n      return this;\n    }\n\n    // Delete any listeners\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeAllListeners();\n    this._checkRunningEvents(runningEvent);\n\n    return this;\n  }\n\n  off(eventName: EventFilter | string, listener: Listener): this {\n    if (!this.provider) {\n      return this;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeListener(listener);\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n\n  removeListener(eventName: EventFilter | string, listener: Listener): this {\n    return this.off(eventName, listener);\n  }\n}\n\nexport class Contract extends BaseContract {\n  // The meta-class properties\n  readonly [key: string]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n  readonly interface: Interface;\n  readonly bytecode: string;\n  readonly signer: Signer;\n\n  constructor(\n    contractInterface: ContractInterface,\n    bytecode: BytesLike | { object: string },\n    signer?: Signer\n  ) {\n    let bytecodeHex: string = null;\n\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = (<any>bytecode).object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(\n      this,\n      \"interface\",\n      getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface)\n    );\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n\n  // @TODO: Future; rename to populateTransaction?\n  getDeployTransaction(...args: Array<any>): TransactionRequest {\n    let tx: TransactionRequest = {};\n\n    // If we have 1 additional argument, we allow transaction overrides\n    if (\n      args.length === this.interface.deploy.inputs.length + 1 &&\n      typeof args[args.length - 1] === \"object\"\n    ) {\n      tx = shallowCopy(args.pop());\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    }\n\n    // Do not allow these to be overridden in a deployment transaction\n    [\"data\", \"from\", \"to\"].forEach((key) => {\n      if ((<any>tx)[key] == null) {\n        return;\n      }\n      logger.throwError(\n        \"cannot override \" + key,\n        Logger.errors.UNSUPPORTED_OPERATION,\n        { operation: key }\n      );\n    });\n\n    if (tx.value) {\n      const value = BigNumber.from(tx.value);\n      if (!value.isZero() && !this.interface.deploy.payable) {\n        logger.throwError(\n          \"non-payable constructor cannot override value\",\n          Logger.errors.UNSUPPORTED_OPERATION,\n          {\n            operation: \"overrides.value\",\n            value: tx.value,\n          }\n        );\n      }\n    }\n\n    // Make sure the call matches the constructor signature\n    logger.checkArgumentCount(\n      args.length,\n      this.interface.deploy.inputs.length,\n      \" in Contract constructor\"\n    );\n\n    // Set the data to the bytecode + the encoded constructor arguments\n    tx.data = hexlify(\n      concat([this.bytecode, this.interface.encodeDeploy(args)])\n    );\n\n    return tx;\n  }\n\n  async deploy(...args: Array<any>): Promise<Contract> {\n    let overrides: any = {};\n\n    // If 1 extra parameter was passed in, it contains overrides\n    if (args.length === this.interface.deploy.inputs.length + 1) {\n      overrides = args.pop();\n    }\n\n    // Make sure the call matches the constructor signature\n    logger.checkArgumentCount(\n      args.length,\n      this.interface.deploy.inputs.length,\n      \" in Contract constructor\"\n    );\n\n    // Resolve ENS names and promises in the arguments\n    const params = await resolveAddresses(\n      this.signer,\n      args,\n      this.interface.deploy.inputs\n    );\n    params.push(overrides);\n\n    // Get the deployment transaction (with optional overrides)\n    const unsignedTx = this.getDeployTransaction(...params);\n    const grindedTx = await this.grindContractAddress(unsignedTx);\n\n    // Send the deployment transaction\n    const tx = await this.signer.sendTransaction(grindedTx);\n\n    const address = getStatic<(tx: TransactionResponse) => string>(\n      this.constructor,\n      \"getContractAddress\"\n    )(tx);\n    const contract = getStatic<\n      (\n        address: string,\n        contractInterface: ContractInterface,\n        signer?: Signer\n      ) => Contract\n    >(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n    // Add the modified wait that wraps events\n    addContractWait(contract, tx);\n\n    defineReadOnly(contract, \"deployTransaction\", tx);\n    return contract;\n  }\n\n  attach(address: string): Contract {\n    return (<any>this.constructor).getContract(\n      address,\n      this.interface,\n      this.signer\n    );\n  }\n\n  connect(signer: Signer) {\n    return new (<{ new (...args: any[]): ContractFactory }>this.constructor)(\n      this.interface,\n      this.bytecode,\n      signer\n    );\n  }\n\n  static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n    if (compilerOutput == null) {\n      logger.throwError(\n        \"missing compiler output\",\n        Logger.errors.MISSING_ARGUMENT,\n        { argument: \"compilerOutput\" }\n      );\n    }\n\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n\n    const abi = compilerOutput.abi;\n\n    let bytecode: any = null;\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n\n    return new this(abi, bytecode, signer);\n  }\n\n  static getInterface(contractInterface: ContractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n\n  static getContractAddress(transaction: TransactionResponse): string {\n    return getContractAddress(\n      transaction.from,\n      transaction.nonce,\n      transaction.data\n    );\n  }\n\n  static getContract(\n    address: string,\n    contractInterface: ContractInterface,\n    signer?: Signer\n  ): Contract {\n    return new Contract(address, contractInterface, signer);\n  }\n\n  async grindContractAddress(\n    tx: TransactionRequest\n  ): Promise<TransactionRequest> {\n    if (tx.nonce == null) {\n      tx.nonce = await this.signer.getTransactionCount(\"pending\");\n    }\n    const sender = await this.signer.getAddress();\n    const toShard = getShardFromAddress(sender);\n    var i = 0;\n    var startingData = tx.data;\n    while (i < 10000) {\n      var contractAddress = getContractAddress(sender, tx.nonce, tx.data);\n      var contractShard = getShardFromAddress(contractAddress);\n\n      if (contractShard === toShard) {\n        return tx;\n      }\n      var salt = randomBytes(32);\n      tx.data = hexlify(concat([startingData, salt]));\n      i++;\n    }\n    logger.throwError(\n      \"unable to find salt for contract deployment\",\n      Logger.errors.TIMEOUT\n    );\n    return tx;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}