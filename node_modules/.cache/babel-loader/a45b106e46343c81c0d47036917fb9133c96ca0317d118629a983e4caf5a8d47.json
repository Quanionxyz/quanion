{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.etherscanConfigExtender = exports.verifyAllowedChains = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst ChainConfig_1 = require(\"./ChainConfig\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst verifyAllowedChains = etherscanConfig => {\n  if (etherscanConfig.apiKey === null || etherscanConfig.apiKey === undefined || typeof etherscanConfig.apiKey !== \"object\") {\n    return;\n  }\n  // check if any of the configured api keys is for an unsupported network\n  const builtinChains = Object.keys(ChainConfig_1.chainConfig);\n  const customChains = etherscanConfig.customChains.map(x => x.network);\n  const allowedChains = [...builtinChains, ...customChains];\n  const actual = Object.keys(etherscanConfig.apiKey);\n  const invalidNetwork = actual.find(chain => !allowedChains.includes(chain));\n  if (invalidNetwork !== undefined) {\n    throw new errors_1.HardhatEtherscanPluginError(constants_1.pluginName, `You set an Etherscan API token for the network \"${invalidNetwork}\" but the plugin doesn't support it, or it's spelled incorrectly.\n\nTo see the list of supported networks, run this command:\n\n  npx hardhat verify --list-networks\n\nLearn more at https://hardhat.org/verify-multiple-networks`);\n  }\n};\nexports.verifyAllowedChains = verifyAllowedChains;\nconst etherscanConfigExtender = (resolvedConfig, config) => {\n  const defaultConfig = {\n    apiKey: \"\",\n    customChains: []\n  };\n  if (config.etherscan !== undefined) {\n    const {\n      cloneDeep\n    } = require(\"lodash\");\n    const customConfig = cloneDeep(config.etherscan);\n    resolvedConfig.etherscan = {\n      ...defaultConfig,\n      ...customConfig\n    };\n  } else {\n    resolvedConfig.etherscan = defaultConfig;\n    // check that there is no etherscan entry in the networks object, since\n    // this is a common mistake done by users\n    if (resolvedConfig.networks?.etherscan !== undefined) {\n      console.warn(chalk_1.default.yellow(`WARNING: you have an 'etherscan' entry in your networks configuration. This is likely a mistake. The etherscan configuration should be at the root of the configuration, not within the networks object.`));\n    }\n  }\n};\nexports.etherscanConfigExtender = etherscanConfigExtender;","map":{"version":3,"names":["chalk_1","__importDefault","require","ChainConfig_1","constants_1","errors_1","verifyAllowedChains","etherscanConfig","apiKey","undefined","builtinChains","Object","keys","chainConfig","customChains","map","x","network","allowedChains","actual","invalidNetwork","find","chain","includes","HardhatEtherscanPluginError","pluginName","exports","etherscanConfigExtender","resolvedConfig","config","defaultConfig","etherscan","cloneDeep","customConfig","networks","console","warn","default","yellow"],"sources":["/workspace/quanion/node_modules/@nomiclabs/hardhat-etherscan/src/config.ts"],"sourcesContent":["import type LodashT from \"lodash\";\n\nimport chalk from \"chalk\";\nimport { ConfigExtender } from \"hardhat/types\";\nimport { chainConfig } from \"./ChainConfig\";\nimport { EtherscanConfig } from \"./types\";\nimport { pluginName } from \"./constants\";\nimport { HardhatEtherscanPluginError } from \"./errors\";\n\nexport const verifyAllowedChains = (etherscanConfig: EtherscanConfig) => {\n  if (\n    etherscanConfig.apiKey === null ||\n    etherscanConfig.apiKey === undefined ||\n    typeof etherscanConfig.apiKey !== \"object\"\n  ) {\n    return;\n  }\n\n  // check if any of the configured api keys is for an unsupported network\n  const builtinChains = Object.keys(chainConfig);\n  const customChains = etherscanConfig.customChains.map((x) => x.network);\n  const allowedChains = [...builtinChains, ...customChains];\n\n  const actual = Object.keys(etherscanConfig.apiKey);\n\n  const invalidNetwork = actual.find((chain) => !allowedChains.includes(chain));\n\n  if (invalidNetwork !== undefined) {\n    throw new HardhatEtherscanPluginError(\n      pluginName,\n      `You set an Etherscan API token for the network \"${invalidNetwork}\" but the plugin doesn't support it, or it's spelled incorrectly.\n\nTo see the list of supported networks, run this command:\n\n  npx hardhat verify --list-networks\n\nLearn more at https://hardhat.org/verify-multiple-networks`\n    );\n  }\n};\n\nexport const etherscanConfigExtender: ConfigExtender = (\n  resolvedConfig,\n  config\n) => {\n  const defaultConfig = {\n    apiKey: \"\",\n    customChains: [],\n  };\n\n  if (config.etherscan !== undefined) {\n    const { cloneDeep } = require(\"lodash\") as typeof LodashT;\n    const customConfig = cloneDeep(config.etherscan);\n\n    resolvedConfig.etherscan = { ...defaultConfig, ...customConfig };\n  } else {\n    resolvedConfig.etherscan = defaultConfig;\n\n    // check that there is no etherscan entry in the networks object, since\n    // this is a common mistake done by users\n    if (resolvedConfig.networks?.etherscan !== undefined) {\n      console.warn(\n        chalk.yellow(\n          `WARNING: you have an 'etherscan' entry in your networks configuration. This is likely a mistake. The etherscan configuration should be at the root of the configuration, not within the networks object.`\n        )\n      );\n    }\n  }\n};\n"],"mappings":";;;;;;;;;;;AAEA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,aAAA,GAAAD,OAAA;AAEA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAH,OAAA;AAEO,MAAMI,mBAAmB,GAAIC,eAAgC,IAAI;EACtE,IACEA,eAAe,CAACC,MAAM,KAAK,IAAI,IAC/BD,eAAe,CAACC,MAAM,KAAKC,SAAS,IACpC,OAAOF,eAAe,CAACC,MAAM,KAAK,QAAQ,EAC1C;IACA;;EAGF;EACA,MAAME,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACT,aAAA,CAAAU,WAAW,CAAC;EAC9C,MAAMC,YAAY,GAAGP,eAAe,CAACO,YAAY,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,CAAC;EACvE,MAAMC,aAAa,GAAG,CAAC,GAAGR,aAAa,EAAE,GAAGI,YAAY,CAAC;EAEzD,MAAMK,MAAM,GAAGR,MAAM,CAACC,IAAI,CAACL,eAAe,CAACC,MAAM,CAAC;EAElD,MAAMY,cAAc,GAAGD,MAAM,CAACE,IAAI,CAAEC,KAAK,IAAK,CAACJ,aAAa,CAACK,QAAQ,CAACD,KAAK,CAAC,CAAC;EAE7E,IAAIF,cAAc,KAAKX,SAAS,EAAE;IAChC,MAAM,IAAIJ,QAAA,CAAAmB,2BAA2B,CACnCpB,WAAA,CAAAqB,UAAU,EACV,mDAAmDL,cAAc;;;;;;2DAMZ,CACtD;;AAEL,CAAC;AA9BYM,OAAA,CAAApB,mBAAmB,GAAAA,mBAAA;AAgCzB,MAAMqB,uBAAuB,GAAmBA,CACrDC,cAAc,EACdC,MAAM,KACJ;EACF,MAAMC,aAAa,GAAG;IACpBtB,MAAM,EAAE,EAAE;IACVM,YAAY,EAAE;GACf;EAED,IAAIe,MAAM,CAACE,SAAS,KAAKtB,SAAS,EAAE;IAClC,MAAM;MAAEuB;IAAS,CAAE,GAAG9B,OAAO,CAAC,QAAQ,CAAmB;IACzD,MAAM+B,YAAY,GAAGD,SAAS,CAACH,MAAM,CAACE,SAAS,CAAC;IAEhDH,cAAc,CAACG,SAAS,GAAG;MAAE,GAAGD,aAAa;MAAE,GAAGG;IAAY,CAAE;GACjE,MAAM;IACLL,cAAc,CAACG,SAAS,GAAGD,aAAa;IAExC;IACA;IACA,IAAIF,cAAc,CAACM,QAAQ,EAAEH,SAAS,KAAKtB,SAAS,EAAE;MACpD0B,OAAO,CAACC,IAAI,CACVpC,OAAA,CAAAqC,OAAK,CAACC,MAAM,CACV,0MAA0M,CAC3M,CACF;;;AAGP,CAAC;AA3BYZ,OAAA,CAAAC,uBAAuB,GAAAA,uBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}