{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTableBorderGetter = exports.drawBorderBottom = exports.drawBorderJoin = exports.drawBorderTop = exports.drawBorder = exports.createSeparatorGetter = exports.drawBorderSegments = void 0;\nconst drawContent_1 = require(\"./drawContent\");\nconst drawBorderSegments = (columnWidths, parameters) => {\n  const {\n    separator,\n    horizontalBorderIndex,\n    spanningCellManager\n  } = parameters;\n  return columnWidths.map((columnWidth, columnIndex) => {\n    const normalSegment = separator.body.repeat(columnWidth);\n    if (horizontalBorderIndex === undefined) {\n      return normalSegment;\n    }\n    /* istanbul ignore next */\n    const range = spanningCellManager === null || spanningCellManager === void 0 ? void 0 : spanningCellManager.getContainingRange({\n      col: columnIndex,\n      row: horizontalBorderIndex\n    });\n    if (!range) {\n      return normalSegment;\n    }\n    const {\n      topLeft\n    } = range;\n    // draw border segments as usual for top border of spanning cell\n    if (horizontalBorderIndex === topLeft.row) {\n      return normalSegment;\n    }\n    // if for first column/row of spanning cell, just skip\n    if (columnIndex !== topLeft.col) {\n      return '';\n    }\n    return range.extractBorderContent(horizontalBorderIndex);\n  });\n};\nexports.drawBorderSegments = drawBorderSegments;\nconst createSeparatorGetter = dependencies => {\n  const {\n    separator,\n    spanningCellManager,\n    horizontalBorderIndex,\n    rowCount\n  } = dependencies;\n  // eslint-disable-next-line complexity\n  return (verticalBorderIndex, columnCount) => {\n    const inSameRange = spanningCellManager === null || spanningCellManager === void 0 ? void 0 : spanningCellManager.inSameRange;\n    if (horizontalBorderIndex !== undefined && inSameRange) {\n      const topCell = {\n        col: verticalBorderIndex,\n        row: horizontalBorderIndex - 1\n      };\n      const leftCell = {\n        col: verticalBorderIndex - 1,\n        row: horizontalBorderIndex\n      };\n      const oppositeCell = {\n        col: verticalBorderIndex - 1,\n        row: horizontalBorderIndex - 1\n      };\n      const currentCell = {\n        col: verticalBorderIndex,\n        row: horizontalBorderIndex\n      };\n      const pairs = [[oppositeCell, topCell], [topCell, currentCell], [currentCell, leftCell], [leftCell, oppositeCell]];\n      // left side of horizontal border\n      if (verticalBorderIndex === 0) {\n        if (inSameRange(currentCell, topCell) && separator.bodyJoinOuter) {\n          return separator.bodyJoinOuter;\n        }\n        return separator.left;\n      }\n      // right side of horizontal border\n      if (verticalBorderIndex === columnCount) {\n        if (inSameRange(oppositeCell, leftCell) && separator.bodyJoinOuter) {\n          return separator.bodyJoinOuter;\n        }\n        return separator.right;\n      }\n      // top horizontal border\n      if (horizontalBorderIndex === 0) {\n        if (inSameRange(currentCell, leftCell)) {\n          return separator.body;\n        }\n        return separator.join;\n      }\n      // bottom horizontal border\n      if (horizontalBorderIndex === rowCount) {\n        if (inSameRange(topCell, oppositeCell)) {\n          return separator.body;\n        }\n        return separator.join;\n      }\n      const sameRangeCount = pairs.map(pair => {\n        return inSameRange(...pair);\n      }).filter(Boolean).length;\n      // four cells are belongs to different spanning cells\n      if (sameRangeCount === 0) {\n        return separator.join;\n      }\n      // belong to one spanning cell\n      if (sameRangeCount === 4) {\n        return '';\n      }\n      // belongs to two spanning cell\n      if (sameRangeCount === 2) {\n        if (inSameRange(...pairs[1]) && inSameRange(...pairs[3]) && separator.bodyJoinInner) {\n          return separator.bodyJoinInner;\n        }\n        return separator.body;\n      }\n      /* istanbul ignore next */\n      if (sameRangeCount === 1) {\n        if (!separator.joinRight || !separator.joinLeft || !separator.joinUp || !separator.joinDown) {\n          throw new Error(`Can not get border separator for position [${horizontalBorderIndex}, ${verticalBorderIndex}]`);\n        }\n        if (inSameRange(...pairs[0])) {\n          return separator.joinDown;\n        }\n        if (inSameRange(...pairs[1])) {\n          return separator.joinLeft;\n        }\n        if (inSameRange(...pairs[2])) {\n          return separator.joinUp;\n        }\n        return separator.joinRight;\n      }\n      /* istanbul ignore next */\n      throw new Error('Invalid case');\n    }\n    if (verticalBorderIndex === 0) {\n      return separator.left;\n    }\n    if (verticalBorderIndex === columnCount) {\n      return separator.right;\n    }\n    return separator.join;\n  };\n};\nexports.createSeparatorGetter = createSeparatorGetter;\nconst drawBorder = (columnWidths, parameters) => {\n  const borderSegments = (0, exports.drawBorderSegments)(columnWidths, parameters);\n  const {\n    drawVerticalLine,\n    horizontalBorderIndex,\n    spanningCellManager\n  } = parameters;\n  return (0, drawContent_1.drawContent)({\n    contents: borderSegments,\n    drawSeparator: drawVerticalLine,\n    elementType: 'border',\n    rowIndex: horizontalBorderIndex,\n    separatorGetter: (0, exports.createSeparatorGetter)(parameters),\n    spanningCellManager\n  }) + '\\n';\n};\nexports.drawBorder = drawBorder;\nconst drawBorderTop = (columnWidths, parameters) => {\n  const {\n    border\n  } = parameters;\n  const result = (0, exports.drawBorder)(columnWidths, {\n    ...parameters,\n    separator: {\n      body: border.topBody,\n      join: border.topJoin,\n      left: border.topLeft,\n      right: border.topRight\n    }\n  });\n  if (result === '\\n') {\n    return '';\n  }\n  return result;\n};\nexports.drawBorderTop = drawBorderTop;\nconst drawBorderJoin = (columnWidths, parameters) => {\n  const {\n    border\n  } = parameters;\n  return (0, exports.drawBorder)(columnWidths, {\n    ...parameters,\n    separator: {\n      body: border.joinBody,\n      bodyJoinInner: border.bodyJoin,\n      bodyJoinOuter: border.bodyLeft,\n      join: border.joinJoin,\n      joinDown: border.joinMiddleDown,\n      joinLeft: border.joinMiddleLeft,\n      joinRight: border.joinMiddleRight,\n      joinUp: border.joinMiddleUp,\n      left: border.joinLeft,\n      right: border.joinRight\n    }\n  });\n};\nexports.drawBorderJoin = drawBorderJoin;\nconst drawBorderBottom = (columnWidths, parameters) => {\n  const {\n    border\n  } = parameters;\n  return (0, exports.drawBorder)(columnWidths, {\n    ...parameters,\n    separator: {\n      body: border.bottomBody,\n      join: border.bottomJoin,\n      left: border.bottomLeft,\n      right: border.bottomRight\n    }\n  });\n};\nexports.drawBorderBottom = drawBorderBottom;\nconst createTableBorderGetter = (columnWidths, parameters) => {\n  return (index, size) => {\n    const drawBorderParameters = {\n      ...parameters,\n      horizontalBorderIndex: index\n    };\n    if (index === 0) {\n      return (0, exports.drawBorderTop)(columnWidths, drawBorderParameters);\n    } else if (index === size) {\n      return (0, exports.drawBorderBottom)(columnWidths, drawBorderParameters);\n    }\n    return (0, exports.drawBorderJoin)(columnWidths, drawBorderParameters);\n  };\n};\nexports.createTableBorderGetter = createTableBorderGetter;","map":{"version":3,"names":["drawContent_1","require","drawBorderSegments","columnWidths","parameters","separator","horizontalBorderIndex","spanningCellManager","map","columnWidth","columnIndex","normalSegment","body","repeat","undefined","range","getContainingRange","col","row","topLeft","extractBorderContent","exports","createSeparatorGetter","dependencies","rowCount","verticalBorderIndex","columnCount","inSameRange","topCell","leftCell","oppositeCell","currentCell","pairs","bodyJoinOuter","left","right","join","sameRangeCount","pair","filter","Boolean","length","bodyJoinInner","joinRight","joinLeft","joinUp","joinDown","Error","drawBorder","borderSegments","drawVerticalLine","drawContent","contents","drawSeparator","elementType","rowIndex","separatorGetter","drawBorderTop","border","result","topBody","topJoin","topRight","drawBorderJoin","joinBody","bodyJoin","bodyLeft","joinJoin","joinMiddleDown","joinMiddleLeft","joinMiddleRight","joinMiddleUp","drawBorderBottom","bottomBody","bottomJoin","bottomLeft","bottomRight","createTableBorderGetter","index","size","drawBorderParameters"],"sources":["../../src/drawBorder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}