{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@quais/abstract-provider\";\nimport { encode as base64Encode } from \"@quais/base64\";\nimport { Base58 } from \"@quais/basex\";\nimport { BigNumber } from \"@quais/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@quais/bytes\";\nimport { HashZero } from \"@quais/constants\";\nimport { dnsEncode, namehash } from \"@quais/hash\";\nimport { getNetwork } from \"@quais/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@quais/properties\";\nimport { sha256 } from \"@quais/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@quais/strings\";\nimport { fetchJson, poll } from \"@quais/web\";\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n*  EventType\n*   - \"block\"\n*   - \"poll\"\n*   - \"didPoll\"\n*   - \"pending\"\n*   - \"error\"\n*   - \"network\"\n*   - filter\n*   - topics array\n*   - transaction hash\n*/\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n      case \"filter\":\n        return this.filter;\n    }\n    return this.tag;\n  }\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n  get hash() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n    return comps[1];\n  }\n  get filter() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n    return filter;\n  }\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n  const result = arrayify(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (let i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n  for (let i = 0; i < datas.length; i++) {\n    const data = arrayify(datas[i]);\n    // Update the bytes offset\n    result[i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return hexConcat(result);\n}\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n  supportsWildcard() {\n    if (!this._supportsEip2544) {\n      // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n      this._supportsEip2544 = this.provider.call({\n        to: this.address,\n        data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n      }).then(result => {\n        return BigNumber.from(result).eq(1);\n      }).catch(error => {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return false;\n        }\n        // Rethrow the error: link is down, etc. Let future attempts retry.\n        this._supportsEip2544 = null;\n        throw error;\n      });\n    }\n    return this._supportsEip2544;\n  }\n  _fetch(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        ccipReadEnabled: true,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n      // Wildcard support; use EIP-2544 to resolve the request\n      let parseBytes = false;\n      if (yield this.supportsWildcard()) {\n        parseBytes = true;\n        // selector(\"resolve(bytes,bytes)\")\n        tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n      }\n      try {\n        let result = yield this.provider.call(tx);\n        if (arrayify(result).length % 32 === 4) {\n          logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n            transaction: tx,\n            data: result\n          });\n        }\n        if (parseBytes) {\n          result = _parseBytes(result, 0);\n        }\n        return result;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n        throw error;\n      }\n    });\n  }\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._fetch(selector, parameters);\n      if (result != null) {\n        return _parseBytes(result, 0);\n      }\n      return null;\n    });\n  }\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n    const bytes = arrayify(hexBytes);\n    // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    }\n    // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    }\n    // Bech32\n    if (coinInfo.prefix != null) {\n      const length = bytes[1];\n      // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n      let version = bytes[0];\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n    }\n    return null;\n  }\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      }\n      // If Ethereum, use the standard `addr(bytes32)`\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const result = yield this._fetch(\"0x3b3b57de\");\n          // No address\n          if (result === \"0x\" || result === HashZero) {\n            return null;\n          }\n          return this.provider.formatter.callAddress(result);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n          throw error;\n        }\n      }\n      // keccak256(\"addr(bytes32,uint256\")\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n      // No address\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // Compute the address\n      const address = this._getAddress(coinType, hexBytes);\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n      return address;\n    });\n  }\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [{\n        type: \"name\",\n        content: this.name\n      }];\n      try {\n        // test data for ricmoo.eth\n        //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n        const avatar = yield this.getText(\"avatar\");\n        if (avatar == null) {\n          return null;\n        }\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n          if (match == null) {\n            continue;\n          }\n          const scheme = match[1].toLowerCase();\n          switch (scheme) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: getIpfsLink(avatar)\n              };\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                });\n                // The owner of this name\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n                if (comps.length !== 2) {\n                  return null;\n                }\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                // Check that this account owns the token\n                if (scheme === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (scheme === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n                  if (balance.isZero()) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                }\n                // Call the token contract for the metadata URL\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n                let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                if (metadataUrl == null) {\n                  return null;\n                }\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                });\n                // ERC-1155 allows a generic {id} in the URL\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                }\n                // Transform IPFS metadata links\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                });\n                // Get the token metadata\n                const metadata = yield fetchJson(metadataUrl);\n                if (!metadata) {\n                  return null;\n                }\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                });\n                // Pull the image URL out\n                let imageUrl = metadata.image;\n                if (typeof imageUrl !== \"string\") {\n                  return null;\n                }\n                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  // Allow\n                } else {\n                  // Transform IPFS link to gateway\n                  const ipfs = imageUrl.match(matcherIpfs);\n                  if (ipfs == null) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"url-ipfs\",\n                    content: imageUrl\n                  });\n                  imageUrl = getIpfsLink(imageUrl);\n                }\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return {\n                  linkage,\n                  url: imageUrl\n                };\n              }\n          }\n        }\n      } catch (error) {}\n      return null;\n    });\n  }\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n      // No contenthash\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // IPFS (CID: 1, Type: DAG-PB)\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      }\n      // IPNS (CID: 1, Type: libp2p-key)\n      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n      if (ipns) {\n        const length = parseInt(ipns[3], 16);\n        if (ipns[4].length === length * 2) {\n          return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n        }\n      }\n      // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n      const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n      if (skynet) {\n        if (skynet[1].length === 34 * 2) {\n          // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n          const urlSafe = {\n            \"=\": \"\",\n            \"+\": \"-\",\n            \"/\": \"_\"\n          };\n          const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, a => urlSafe[a]);\n          return \"sia:/\\/\" + hash;\n        }\n      }\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key);\n      // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n      // Pad to word-size (32 bytes)\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      return toUtf8String(hexBytes);\n    });\n  }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    super();\n    // Events being listened to\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.disableCcipRead = false;\n    this.formatter = new.target.getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      this._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(error => {});\n      // Trigger initial network setting (async)\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._maxFilterBlockRange = 10;\n    this._pollingInterval = 40000;\n    this._fastQueryDate = 0;\n  }\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        }\n        // Try the Provider's network detection (this MUST throw if it cannot)\n        if (network == null) {\n          network = yield this.detectNetwork();\n        }\n        // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        }\n        // Possible this call stacked so do not call defineReadOnly again\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n          this.emit(\"network\", network, null);\n        }\n      }\n      return this._network;\n    });\n  }\n  // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n        throw error;\n      });\n    });\n  }\n  // @TODO: Remove this and just create a singleton formatter\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n    return defaultFormatter;\n  }\n  // @TODO: Remove this and just use getNetwork\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n  ccipReadFetch(tx, calldata, urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disableCcipRead || urls.length === 0) {\n        return null;\n      }\n      const sender = tx.to.toLowerCase();\n      const data = calldata.toLowerCase();\n      const errorMessages = [];\n      for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        // URL expansion\n        const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n        // If no {data} is present, use POST; otherwise GET\n        const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n          data,\n          sender\n        });\n        const result = yield fetchJson({\n          url: href,\n          errorPassThrough: true\n        }, json, (value, response) => {\n          value.status = response.statusCode;\n          return value;\n        });\n        if (result.data) {\n          return result.data;\n        }\n        const errorMessage = result.message || \"unknown error\";\n        // 4xx indicates the result is not present; stop\n        if (result.status >= 400 && result.status < 500) {\n          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {\n            url,\n            errorMessage\n          });\n        }\n        // 5xx indicates server issue; try the next url\n        errorMessages.push(errorMessage);\n      }\n      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n        urls,\n        errorMessages\n      });\n    });\n  }\n  // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready();\n      // Allowing stale data up to maxAge old\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            }\n            // Too old; fetch a new value\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(({\n        blockNumber,\n        networkError\n      }) => {\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n          throw networkError;\n        }\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n        this._maxInternalBlockNumber = blockNumber;\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber;\n      // Swallow unhandled exceptions; if needed they are handled else where\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Polling is now disabled\n      return;\n      const pollId = nextPollId++;\n      // Track all running promises, so we can trigger a post-poll once they are complete\n      const runners = [];\n      let blockNumber = null;\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n      this._setFastBlockNumber(blockNumber);\n      // Emit a poll event after we have the latest (fast) block number\n      this.emit(\"poll\", pollId, blockNumber);\n      // If the block has not changed, meh.\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      }\n      // First polling cycle, trigger a \"block\" events\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      }\n      // The emitted block was updated, check for obsolete events\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          }\n          // The block we were at when we emitted this event\n          const eventBlockNumber = this._emitted[key];\n          // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n          if (eventBlockNumber === \"pending\") {\n            return;\n          }\n          // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      }\n      // First polling cycle\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      }\n      // Find all transaction hashes we are waiting on\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n          case \"filter\":\n            {\n              // We only allow a single getLogs to be in-flight at a time\n              if (!event._inflight) {\n                event._inflight = true;\n                // This is the first filter for this event, so we want to\n                // restrict events to events that happened no earlier than now\n                if (event._lastBlockNumber === -2) {\n                  event._lastBlockNumber = blockNumber - 1;\n                }\n                // Filter from the last *known* event; due to load-balancing\n                // and some nodes returning updated block numbers before\n                // indexing events, a logs result with 0 entries cannot be\n                // trusted and we must retry a range which includes it again\n                const filter = event.filter;\n                filter.fromBlock = event._lastBlockNumber + 1;\n                filter.toBlock = blockNumber;\n                // Prevent fitler ranges from growing too wild, since it is quite\n                // likely there just haven't been any events to move the lastBlockNumber.\n                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                if (minFromBlock > filter.fromBlock) {\n                  filter.fromBlock = minFromBlock;\n                }\n                if (filter.fromBlock < 0) {\n                  filter.fromBlock = 0;\n                }\n                const runner = this.getLogs(filter).then(logs => {\n                  // Allow the next getLogs\n                  event._inflight = false;\n                  if (logs.length === 0) {\n                    return;\n                  }\n                  logs.forEach(log => {\n                    // Only when we get an event for a given block number\n                    // can we trust the events are indexed\n                    if (log.blockNumber > event._lastBlockNumber) {\n                      event._lastBlockNumber = log.blockNumber;\n                    }\n                    // Make sure we stall requests to fetch blocks and txs\n                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                    this.emit(filter, log);\n                  });\n                }).catch(error => {\n                  this.emit(\"error\", error);\n                  // Allow another getLogs (the range was not updated)\n                  event._inflight = false;\n                });\n                runners.push(runner);\n              }\n              break;\n            }\n        }\n      });\n      this._lastBlockNumber = blockNumber;\n      // Once all events for this loop have been processed, emit \"didPoll\"\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  }\n  // Deprecated; do not use this\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n    if (this.polling) {\n      this.poll();\n    }\n  }\n  get network() {\n    return this._network;\n  }\n  // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready();\n      // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n      const currentNetwork = yield this.detectNetwork();\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork;\n          // Reset all internal block number guards and caches\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null;\n          // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n      return network;\n    });\n  }\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n  get polling() {\n    return this._poller != null;\n  }\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll();\n          // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            }\n            // Clear out the bootstrap so we can do another\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n    this._pollingInterval = value;\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n  _getFastBlockNumber() {\n    const now = getTime();\n    // Stale block number, request a newer value\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n        return this._fastBlockNumber;\n      });\n    }\n    return this._fastBlockNumberPromise;\n  }\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    }\n    // Update the time we updated the blocknumber\n    this._fastQueryDate = getTime();\n    // Newer block number, use  it\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash);\n      // Receipt is already good\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      }\n      // Poll until the receipt is good...\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n          if (alreadyDone()) {\n            return;\n          }\n          resolve(receipt);\n        };\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            }\n            // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                }\n                // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti];\n                    // Successfully mined!\n                    if (tx.hash === transactionHash) {\n                      return;\n                    }\n                    // Matches our transaction from and nonce; its a replacement\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      }\n                      // Get the receipt of the replacement\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                      // Already resolved or rejected (prolly a timeout)\n                      if (alreadyDone()) {\n                        return;\n                      }\n                      // The reason we were replaced\n                      let reason = \"replaced\";\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      }\n                      // Explain why we were replaced\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n                  scannedBlock++;\n                }\n              }\n              if (done) {\n                return;\n              }\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n              this.once(\"block\", replaceHandler);\n            });\n          });\n          if (done) {\n            return;\n          }\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n          if (timer.unref) {\n            timer.unref();\n          }\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n  getMaxPriorityFeePerGas() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getMaxPriorityFeePerGas\", {});\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getMaxPriorityFeePerGas\",\n          result,\n          error\n        });\n      }\n    });\n  }\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  // This should be called by any subclass wrapping a TransactionResponse\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n    const result = tx;\n    // Check the hash we expect is the same as the hash the server reported\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n      if (timeout == null) {\n        timeout = 0;\n      }\n      // Get the details to detect replacement\n      let replacement = undefined;\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n      if (receipt == null && confirms === 0) {\n        return null;\n      }\n      // No longer pending, allow the polling loop to garbage collect this\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n      return receipt;\n    });\n    return result;\n  }\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n  _call(transaction, blockTag, attempt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (attempt >= MAX_CCIP_REDIRECTS) {\n        logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n          redirects: attempt,\n          transaction\n        });\n      }\n      const txSender = transaction.to;\n      const result = yield this.perform(\"call\", {\n        transaction,\n        blockTag\n      });\n      // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n      if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n        try {\n          const data = hexDataSlice(result, 4);\n          // Check the sender of the OffchainLookup matches the transaction\n          const sender = hexDataSlice(data, 0, 32);\n          if (!BigNumber.from(sender).eq(txSender)) {\n            logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          // Read the URLs from the response\n          const urls = [];\n          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n          const urlsData = hexDataSlice(data, urlsOffset + 32);\n          for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) {\n              logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                name: \"OffchainLookup\",\n                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                transaction,\n                data: result\n              });\n            }\n            urls.push(url);\n          }\n          // Get the CCIP calldata to forward\n          const calldata = _parseBytes(data, 64);\n          // Get the callbackSelector (bytes4)\n          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n            logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          const callbackSelector = hexDataSlice(data, 96, 100);\n          // Get the extra data to send back to the contract as context\n          const extraData = _parseBytes(data, 128);\n          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n          if (ccipResult == null) {\n            logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          const tx = {\n            to: txSender,\n            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n          };\n          return this._call(tx, blockTag, attempt + 1);\n        } catch (error) {\n          if (error.code === Logger.errors.SERVER_ERROR) {\n            throw error;\n          }\n        }\n      }\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params: {\n            transaction,\n            blockTag\n          },\n          result,\n          error\n        });\n      }\n    });\n  }\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const resolved = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag),\n        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n      });\n      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n    });\n  }\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n      const address = yield this.resolveName(addressOrName);\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n      return address;\n    });\n  }\n  _getBlock(blockHashOrBlockTag, includeTransactions, simplify) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag;\n      // If blockTag is a number (not \"latest\", etc), this is the block number\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions,\n        simplify: !!simplify\n      };\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params);\n        // Block was not found\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          }\n          // For block tags, if we are asking for a future block, we return null\n          if (params.blockTag != null) {\n            if (blockNumber > Number(this._emitted.block)) {\n              return null;\n            }\n          }\n          // Retry on the next block\n          return undefined;\n        }\n        // Add transactions\n        if (includeTransactions) {\n          let blockNumber = null;\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              }\n              // Add the confirmations using the fast block number (pessimistic)\n              let confirmations = blockNumber - tx.blockNumber + 1;\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n              tx.confirmations = confirmations;\n            }\n          }\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n        return this.formatter.block(block, simplify);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getBlock(blockHashOrBlockTag, simplify = false) {\n    return this._getBlock(blockHashOrBlockTag, false, simplify);\n  }\n  getBlockWithTransactions(blockHashOrBlockTag, simplify = false) {\n    return this._getBlock(blockHashOrBlockTag, true, simplify);\n  }\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        const tx = this.formatter.transactionResponse(result);\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - tx.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          tx.confirmations = confirmations;\n        }\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        // \"geth-etc\" returns receipts before they are ready\n        if (result.blockHash == null) {\n          return undefined;\n        }\n        const receipt = this.formatter.receipt(result);\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          receipt.confirmations = confirmations;\n        }\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n        return this.formatter.blockTag(blockNumber);\n      }\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let currentName = name;\n      while (true) {\n        if (currentName === \"\" || currentName === \".\") {\n          return null;\n        }\n        // Optimization since the eth node cannot change and does\n        // not have a wildcard resolver\n        if (name !== \"eth\" && currentName === \"eth\") {\n          return null;\n        }\n        // Check the current node for a resolver\n        const addr = yield this._getResolver(currentName, \"getResolver\");\n        // Found a resolver!\n        if (addr != null) {\n          const resolver = new Resolver(this, addr, name);\n          // Legacy resolver found, using EIP-2544 so it isn't safe to use\n          if (currentName !== name && !(yield resolver.supportsWildcard())) {\n            return null;\n          }\n          return resolver;\n        }\n        // Get the parent node\n        currentName = currentName.split(\".\").slice(1).join(\".\");\n      }\n    });\n  }\n  _getResolver(name, operation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (operation == null) {\n        operation = \"ENS\";\n      }\n      const network = yield this.getNetwork();\n      // No ENS...\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation,\n          network: network.name\n        });\n      }\n      try {\n        // keccak256(\"resolver(bytes32)\")\n        const addrData = yield this.call({\n          to: network.ensAddress,\n          data: \"0x0178b8bf\" + namehash(name).substring(2)\n        });\n        return this.formatter.callAddress(addrData);\n      } catch (error) {\n        // ENS registry cannot throw errors on resolver(bytes32)\n      }\n      return null;\n    });\n  }\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name;\n      // If it is already an address, nothing to resolve\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      }\n      // Get the addr from the resolver\n      const resolver = yield this.getResolver(name);\n      if (!resolver) {\n        return null;\n      }\n      return yield resolver.getAddress();\n    });\n  }\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n      if (resolverAddr == null) {\n        return null;\n      }\n      // keccak(\"name(bytes32)\")\n      const name = _parseString(yield this.call({\n        to: resolverAddr,\n        data: \"0x691f3431\" + namehash(node).substring(2)\n      }), 0);\n      const addr = yield this.resolveName(name);\n      if (addr != address) {\n        return null;\n      }\n      return name;\n    });\n  }\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n        if (!resolverAddress) {\n          return null;\n        }\n        // Try resolving the avatar against the addr.reverse resolver\n        resolver = new Resolver(this, resolverAddress, node);\n        try {\n          const avatar = yield resolver.getAvatar();\n          if (avatar) {\n            return avatar.url;\n          }\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n        }\n        // Try getting the name and performing forward lookup; allowing wildcards\n        try {\n          // keccak(\"name(bytes32)\")\n          const name = _parseString(yield this.call({\n            to: resolverAddress,\n            data: \"0x691f3431\" + namehash(node).substring(2)\n          }), 0);\n          resolver = yield this.getResolver(name);\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n          return null;\n        }\n      } else {\n        // ENS name; forward lookup with wildcard\n        resolver = yield this.getResolver(nameOrAddress);\n        if (!resolver) {\n          return null;\n        }\n      }\n      const avatar = yield resolver.getAvatar();\n      if (avatar == null) {\n        return null;\n      }\n      return avatar.url;\n    });\n  }\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n    this._events.push(event);\n    this._startEvent(event);\n    return this;\n  }\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n  emit(eventName, ...args) {\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n  removeAllListeners(eventName) {\n    let stopped = [];\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["ForkEvent","Provider","encode","base64Encode","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","constructor","tag","listener","once","_lastBlockNumber","_inflight","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","matcherIpfs","RegExp","matchers","_parseString","result","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","supportsWildcard","_supportsEip2544","call","to","then","eq","catch","code","errors","CALL_EXCEPTION","_fetch","selector","parameters","tx","ccipReadEnabled","parseBytes","throwError","transaction","_fetchBytes","_getAddress","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","getAddress","callAddress","getAvatar","linkage","content","avatar","getText","scheme","url","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","getContentHash","ipns","swarm","skynet","urlSafe","a","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","_events","_emitted","block","disableCcipRead","new","target","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","undefined","ccipReadFetch","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","minFromBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","method","getMaxPriorityFeePerGas","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","_call","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipResult","resolved","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","simplify","Number","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","currentName","_getResolver","resolver","ensAddress","addrData","lookupAddress","node","resolverAddr","nameOrAddress","resolverAddress","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","args","stopped","eventTag","apply","listenerCount","listeners","off","removeAllListeners","found"],"sources":["/workspace/quanion/node_modules/@quais/providers/src.ts/base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@quais/abstract-provider\";\nimport { encode as base64Encode } from \"@quais/base64\";\nimport { Base58 } from \"@quais/basex\";\nimport { BigNumber, BigNumberish } from \"@quais/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@quais/bytes\";\nimport { HashZero } from \"@quais/constants\";\nimport { dnsEncode, namehash } from \"@quais/hash\";\nimport { getNetwork, Network, Networkish } from \"@quais/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@quais/properties\";\nimport { Transaction } from \"@quais/transactions\";\nimport { sha256 } from \"@quais/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@quais/strings\";\nimport { fetchJson, poll } from \"@quais/web\";\n\nimport { Logger } from \"@quais/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n    if (topic == null) { return \"null\"; }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n   // Remove trailing null AND-topics; they are redundant\n   topics = topics.slice();\n   while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n   return topics.map((topic) => {\n       if (Array.isArray(topic)) {\n\n           // Only track unique OR-topics\n           const unique: { [ topic: string ]: boolean } = { }\n           topic.forEach((topic) => {\n               unique[checkTopic(topic)] = true;\n           });\n\n           // The order of OR-topics does not matter\n           const sorted = Object.keys(unique);\n           sorted.sort();\n\n           return sorted.join(\"|\");\n\n       } else {\n           return checkTopic(topic);\n       }\n   }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n   if (data === \"\") { return [ ]; }\n\n   return data.split(/&/g).map((topic) => {\n       if (topic === \"\") { return [ ]; }\n\n       const comps = topic.split(\"|\").map((topic) => {\n           return ((topic === \"null\") ? null: topic);\n       });\n\n       return ((comps.length === 1) ? comps[0]: comps);\n   });\n}\n\nfunction getEventTag(eventName: EventType): string {\n   if (typeof(eventName) === \"string\") {\n       eventName = eventName.toLowerCase();\n\n       if (hexDataLength(eventName) === 32) {\n           return \"tx:\" + eventName;\n       }\n\n       if (eventName.indexOf(\":\") === -1) {\n           return eventName;\n       }\n\n   } else if (Array.isArray(eventName)) {\n       return \"filter:*:\" + serializeTopics(eventName);\n\n   } else if (ForkEvent.isForkEvent(eventName)) {\n       logger.warn(\"not implemented\");\n       throw new Error(\"not implemented\");\n\n   } else if (eventName && typeof(eventName) === \"object\") {\n       return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n   }\n\n   throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n   return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n   return new Promise((resolve) => {\n       setTimeout(resolve, duration);\n   });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n*  EventType\n*   - \"block\"\n*   - \"poll\"\n*   - \"didPoll\"\n*   - \"pending\"\n*   - \"error\"\n*   - \"network\"\n*   - filter\n*   - topics array\n*   - transaction hash\n*/\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n   readonly listener: Listener;\n   readonly once: boolean;\n   readonly tag: string;\n\n   _lastBlockNumber: number\n   _inflight: boolean;\n\n   constructor(tag: string, listener: Listener, once: boolean) {\n       defineReadOnly(this, \"tag\", tag);\n       defineReadOnly(this, \"listener\", listener);\n       defineReadOnly(this, \"once\", once);\n\n       this._lastBlockNumber = -2;\n       this._inflight = false;\n   }\n\n   get event(): EventType {\n       switch (this.type) {\n           case \"tx\":\n              return this.hash;\n           case \"filter\":\n              return this.filter;\n       }\n       return this.tag;\n   }\n\n   get type(): string {\n       return this.tag.split(\":\")[0]\n   }\n\n   get hash(): string {\n       const comps = this.tag.split(\":\");\n       if (comps[0] !== \"tx\") { return null; }\n       return comps[1];\n   }\n\n   get filter(): Filter {\n       const comps = this.tag.split(\":\");\n       if (comps[0] !== \"filter\") { return null; }\n       const address = comps[1];\n\n       const topics = deserializeTopics(comps[2]);\n       const filter: Filter = { };\n\n       if (topics.length > 0) { filter.topics = topics; }\n       if (address && address !== \"*\") { filter.address = address; }\n\n       return filter;\n   }\n\n   pollable(): boolean {\n       return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n   }\n}\n\nexport interface EnsResolver {\n\n   // Name this Resolver is associated with\n   readonly name: string;\n\n   // The address of the resolver\n   readonly address: string;\n\n   // Multichain address resolution (also normal address resolution)\n   // See: https://eips.ethereum.org/EIPS/eip-2304\n   getAddress(coinType?: 60): Promise<null | string>\n\n   // Contenthash field\n   // See: https://eips.ethereum.org/EIPS/eip-1577\n   getContentHash(): Promise<null | string>;\n\n   // Storage of text records\n   // See: https://eips.ethereum.org/EIPS/eip-634\n   getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n   resolveName(name: string): Promise<null | string>;\n   lookupAddress(address: string): Promise<null | string>;\n   getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n   symbol: string,\n   ilk?: string,     // General family\n   prefix?: string,  // Bech32 prefix\n   p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n   p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n   \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n   \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n   \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n   \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n   \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n   \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n   return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n   return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n   url: string;\n   linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n   new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n   new RegExp(\"^(data):(.*)$\", \"i\"),\n   matcherIpfs,\n   new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n   try {\n       return toUtf8String(_parseBytes(result, start));\n   } catch(error) { }\n   return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n   if (result === \"0x\") { return null; }\n\n   const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n   const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n   return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n   if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n       link = link.substring(12);\n   } else if (link.match(/^ipfs:\\/\\//i)) {\n       link = link.substring(7);\n   } else {\n       logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n   }\n\n   return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n   const result = arrayify(value);\n   if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n   const padded = new Uint8Array(32);\n   padded.set(result, 32 - result.length);\n   return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n   if ((value.length % 32) === 0) { return value; }\n\n   const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n   result.set(value);\n   return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n   const result: Array<Uint8Array> = [ ];\n\n   let byteCount = 0;\n\n   // Add place-holders for pointers as we add items\n   for (let i = 0; i < datas.length; i++) {\n       result.push(null);\n       byteCount += 32;\n   }\n\n   for (let i = 0; i < datas.length; i++) {\n       const data = arrayify(datas[i]);\n\n       // Update the bytes offset\n       result[i] = numPad(byteCount);\n\n       // The length and padded value of data\n       result.push(numPad(data.length));\n       result.push(bytesPad(data));\n       byteCount += 32 + Math.ceil(data.length / 32) * 32;\n   }\n\n   return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n   readonly provider: BaseProvider;\n\n   readonly name: string;\n   readonly address: string;\n\n   readonly _resolvedAddress: null | string;\n\n   // For EIP-2544 names, the ancestor that provided the resolver\n   _supportsEip2544: null | Promise<boolean>;\n\n   // The resolvedAddress is only for creating a ReverseLookup resolver\n   constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n       defineReadOnly(this, \"provider\", provider);\n       defineReadOnly(this, \"name\", name);\n       defineReadOnly(this, \"address\", provider.formatter.address(address));\n       defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n   }\n\n   supportsWildcard(): Promise<boolean> {\n       if (!this._supportsEip2544) {\n           // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n           this._supportsEip2544 = this.provider.call({\n               to: this.address,\n               data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n           }).then((result) => {\n               return BigNumber.from(result).eq(1);\n           }).catch((error) => {\n               if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n               // Rethrow the error: link is down, etc. Let future attempts retry.\n               this._supportsEip2544 = null;\n               throw error;\n           });\n       }\n\n       return this._supportsEip2544;\n   }\n\n   async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n       // e.g. keccak256(\"addr(bytes32,uint256)\")\n       const tx = {\n           to: this.address,\n           ccipReadEnabled: true,\n           data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n       };\n\n       // Wildcard support; use EIP-2544 to resolve the request\n       let parseBytes = false;\n       if (await this.supportsWildcard()) {\n           parseBytes = true;\n\n           // selector(\"resolve(bytes,bytes)\")\n           tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n       }\n\n       try {\n           let result = await this.provider.call(tx);\n           if ((arrayify(result).length % 32) === 4) {\n               logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                   transaction: tx, data: result\n               });\n           }\n           if (parseBytes) { result = _parseBytes(result, 0); }\n           return result;\n       } catch (error) {\n           if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n           throw error;\n       }\n   }\n\n   async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n       const result = await this._fetch(selector, parameters);\n       if (result != null) { return _parseBytes(result, 0); }\n       return null;\n   }\n\n   _getAddress(coinType: number, hexBytes: string): string {\n       const coinInfo = coinInfos[String(coinType)];\n\n       if (coinInfo == null) {\n           logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n               operation: `getAddress(${ coinType })`\n           });\n       }\n\n       if (coinInfo.ilk === \"eth\") {\n           return this.provider.formatter.address(hexBytes);\n       }\n\n       const bytes = arrayify(hexBytes);\n\n       // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n       if (coinInfo.p2pkh != null) {\n           const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n           if (p2pkh) {\n               const length = parseInt(p2pkh[1], 16);\n               if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                   return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n               }\n           }\n       }\n\n       // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n       if (coinInfo.p2sh != null) {\n           const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n           if (p2sh) {\n               const length = parseInt(p2sh[1], 16);\n               if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                   return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n               }\n           }\n       }\n\n       // Bech32\n       if (coinInfo.prefix != null) {\n           const length = bytes[1];\n\n           // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n           let version = bytes[0];\n           if (version === 0x00) {\n               if (length !== 20 && length !== 32) {\n                   version = -1;\n               }\n           } else {\n               version = -1;\n           }\n       }\n\n       return null;\n   }\n\n\n   async getAddress(coinType?: number): Promise<string> {\n       if (coinType == null) { coinType = 60; }\n\n       // If Ethereum, use the standard `addr(bytes32)`\n       if (coinType === 60) {\n           try {\n               // keccak256(\"addr(bytes32)\")\n               const result = await this._fetch(\"0x3b3b57de\");\n\n               // No address\n               if (result === \"0x\" || result === HashZero) { return null; }\n\n               return this.provider.formatter.callAddress(result);\n           } catch (error) {\n               if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n               throw error;\n           }\n       }\n\n       // keccak256(\"addr(bytes32,uint256\")\n       const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n       // No address\n       if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n       // Compute the address\n       const address = this._getAddress(coinType, hexBytes);\n\n       if (address == null) {\n           logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n               operation: `getAddress(${ coinType })`,\n               coinType: coinType,\n               data: hexBytes\n           });\n       }\n\n       return address;\n   }\n\n   async getAvatar(): Promise<null | Avatar> {\n       const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n       try {\n           // test data for ricmoo.eth\n           //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n           const avatar = await this.getText(\"avatar\");\n           if (avatar == null) { return null; }\n\n           for (let i = 0; i < matchers.length; i++) {\n               const match = avatar.match(matchers[i]);\n               if (match == null) { continue; }\n\n               const scheme = match[1].toLowerCase();\n\n               switch (scheme) {\n                   case \"https\":\n                       linkage.push({ type: \"url\", content: avatar });\n                       return { linkage, url: avatar };\n\n                   case \"data\":\n                       linkage.push({ type: \"data\", content: avatar });\n                       return { linkage, url: avatar };\n\n                   case \"ipfs\":\n                       linkage.push({ type: \"ipfs\", content: avatar });\n                       return { linkage, url: getIpfsLink(avatar) };\n\n                   case \"erc721\":\n                   case \"erc1155\": {\n                       // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                       const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                       linkage.push({ type: scheme, content: avatar });\n\n                       // The owner of this name\n                       const owner = (this._resolvedAddress || await this.getAddress());\n\n                       const comps = (match[2] || \"\").split(\"/\");\n                       if (comps.length !== 2) { return null; }\n\n                       const addr = await this.provider.formatter.address(comps[0]);\n                       const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                       // Check that this account owns the token\n                       if (scheme === \"erc721\") {\n                           // ownerOf(uint256 tokenId)\n                           const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                               to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                           }));\n                           if (owner !== tokenOwner) { return null; }\n                           linkage.push({ type: \"owner\", content: tokenOwner });\n\n                       } else if (scheme === \"erc1155\") {\n                           // balanceOf(address owner, uint256 tokenId)\n                           const balance = BigNumber.from(await this.provider.call({\n                               to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                           }));\n                           if (balance.isZero()) { return null; }\n                           linkage.push({ type: \"balance\", content: balance.toString() });\n                       }\n\n                       // Call the token contract for the metadata URL\n                       const tx = {\n                           to: this.provider.formatter.address(comps[0]),\n                           data: hexConcat([ selector, tokenId ])\n                       };\n\n                       let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                       if (metadataUrl == null) { return null; }\n                       linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                       // ERC-1155 allows a generic {id} in the URL\n                       if (scheme === \"erc1155\") {\n                           metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                           linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                       }\n\n                       // Transform IPFS metadata links\n                       if (metadataUrl.match(/^ipfs:/i)) {\n                           metadataUrl = getIpfsLink(metadataUrl);\n                       }\n\n                       linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                       // Get the token metadata\n                       const metadata = await fetchJson(metadataUrl);\n                       if (!metadata) { return null; }\n                       linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                       // Pull the image URL out\n                       let imageUrl = metadata.image;\n                       if (typeof(imageUrl) !== \"string\") { return null; }\n\n                       if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                           // Allow\n                       } else {\n                           // Transform IPFS link to gateway\n                           const ipfs = imageUrl.match(matcherIpfs);\n                           if (ipfs == null) { return null; }\n\n                           linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                           imageUrl = getIpfsLink(imageUrl);\n                       }\n\n                       linkage.push({ type: \"url\", content: imageUrl });\n\n                       return { linkage, url: imageUrl };\n                   }\n               }\n           }\n       } catch (error) { }\n\n       return null;\n   }\n\n   async getContentHash(): Promise<string> {\n\n       // keccak256(\"contenthash()\")\n       const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n       // No contenthash\n       if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n       // IPFS (CID: 1, Type: DAG-PB)\n       const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n       if (ipfs) {\n           const length = parseInt(ipfs[3], 16);\n           if (ipfs[4].length === length * 2) {\n               return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n           }\n       }\n\n       // IPNS (CID: 1, Type: libp2p-key)\n       const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n       if (ipns) {\n           const length = parseInt(ipns[3], 16);\n           if (ipns[4].length === length * 2) {\n               return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n           }\n       }\n\n       // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n       const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n       if (swarm) {\n           if (swarm[1].length === (32 * 2)) {\n               return \"bzz:/\\/\" + swarm[1]\n           }\n       }\n\n       const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n       if (skynet) {\n           if (skynet[1].length === (34 * 2)) {\n               // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n               const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n               const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n               return \"sia:/\\/\" + hash;\n           }\n       }\n\n       return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n           operation: \"getContentHash()\",\n           data: hexBytes\n       });\n   }\n\n   async getText(key: string): Promise<string> {\n\n       // The key encoded as parameter to fetchBytes\n       let keyBytes = toUtf8Bytes(key);\n\n       // The nodehash consumes the first slot, so the string pointer targets\n       // offset 64, with the length at offset 64 and data starting at offset 96\n       keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n       // Pad to word-size (32 bytes)\n       if ((keyBytes.length % 32) !== 0) {\n           keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n       }\n\n       const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n       if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n       return toUtf8String(hexBytes);\n   }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n   _networkPromise: Promise<Network>;\n   _network: Network;\n\n   _events: Array<Event>;\n\n   formatter: Formatter;\n\n   // To help mitigate the eventually consistent nature of the blockchain\n   // we keep a mapping of events we emit. If we emit an event X, we expect\n   // that a user should be able to query for that event in the callback,\n   // if the node returns null, we stall the response until we get back a\n   // meaningful value, since we may be hitting a re-org, or a node that\n   // has not indexed the event yet.\n   // Events:\n   //   - t:{hash}    - Transaction hash\n   //   - b:{hash}    - BlockHash\n   //   - block       - The most recent emitted block\n   _emitted: { [ eventName: string ]: number | \"pending\" };\n\n   _pollingInterval: number;\n   _poller: NodeJS.Timer;\n   _bootstrapPoll: NodeJS.Timer;\n\n   _lastBlockNumber: number;\n   _maxFilterBlockRange: number;\n\n   _fastBlockNumber: number;\n   _fastBlockNumberPromise: Promise<number>;\n   _fastQueryDate: number;\n\n   _maxInternalBlockNumber: number;\n   _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n   _context: number;\n   readonly anyNetwork: boolean;\n\n   disableCcipRead: boolean;\n\n\n   /**\n    *  ready\n    *\n    *  A Promise<Network> that resolves only once the provider is ready.\n    *\n    *  Sub-classes that call the super with a network without a chainId\n    *  MUST set this. Standard named networks have a known chainId.\n    *\n    */\n\n   constructor(network: Networkish | Promise<Network>) {\n       super();\n\n       // Events being listened to\n       this._events = [];\n\n       this._emitted = { block: -2 };\n\n       this.disableCcipRead = false;\n\n       this.formatter = new.target.getFormatter();\n\n       // If network is any, this Provider allows the underlying\n       // network to change dynamically, and we auto-detect the\n       // current network\n       defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n       if (this.anyNetwork) { network = this.detectNetwork(); }\n\n       if (network instanceof Promise) {\n           this._networkPromise = network;\n\n           // Squash any \"unhandled promise\" errors; that do not need to be handled\n           network.catch((error) => { });\n\n           // Trigger initial network setting (async)\n           this._ready().catch((error) => { });\n\n       } else {\n           const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n           if (knownNetwork) {\n               defineReadOnly(this, \"_network\", knownNetwork);\n               this.emit(\"network\", knownNetwork, null);\n\n           } else {\n               logger.throwArgumentError(\"invalid network\", \"network\", network);\n           }\n       }\n\n       this._maxInternalBlockNumber = -1024;\n\n       this._lastBlockNumber = -2;\n       this._maxFilterBlockRange = 10;\n\n       this._pollingInterval = 40000;\n\n       this._fastQueryDate = 0;\n   }\n\n   async _ready(): Promise<Network> {\n       if (this._network == null) {\n           let network: Network = null;\n           if (this._networkPromise) {\n               try {\n                   network = await this._networkPromise;\n               } catch (error) { }\n           }\n\n           // Try the Provider's network detection (this MUST throw if it cannot)\n           if (network == null) {\n               network = await this.detectNetwork();\n           }\n\n           // This should never happen; every Provider sub-class should have\n           // suggested a network by here (or have thrown).\n           if (!network) {\n               logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n           }\n\n           // Possible this call stacked so do not call defineReadOnly again\n           if (this._network == null) {\n               if (this.anyNetwork) {\n                   this._network = network;\n               } else {\n                   defineReadOnly(this, \"_network\", network);\n               }\n               this.emit(\"network\", network, null);\n           }\n       }\n\n       return this._network;\n   }\n\n   // This will always return the most recently established network.\n   // For \"any\", this can change (a \"network\" event is emitted before\n   // any change is reflected); otherwise this cannot change\n   get ready(): Promise<Network> {\n       return poll(() => {\n           return this._ready().then((network) => {\n               return network;\n           }, (error) => {\n               // If the network isn't running yet, we will wait\n               if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                   return undefined;\n               }\n               throw error;\n           });\n       });\n   }\n\n   // @TODO: Remove this and just create a singleton formatter\n   static getFormatter(): Formatter {\n       if (defaultFormatter == null) {\n           defaultFormatter = new Formatter();\n       }\n       return defaultFormatter;\n   }\n\n   // @TODO: Remove this and just use getNetwork\n   static getNetwork(network: Networkish): Network {\n       return getNetwork((network == null) ? \"homestead\": network);\n   }\n\n   async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n       if (this.disableCcipRead || urls.length === 0) { return null; }\n\n       const sender = tx.to.toLowerCase();\n       const data = calldata.toLowerCase();\n\n       const errorMessages: Array<string> = [ ];\n\n       for (let i = 0; i < urls.length; i++) {\n           const url = urls[i];\n\n           // URL expansion\n           const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n           // If no {data} is present, use POST; otherwise GET\n           const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n           const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n               value.status = response.statusCode;\n               return value;\n           });\n\n           if (result.data) { return result.data; }\n\n           const errorMessage = (result.message || \"unknown error\");\n\n           // 4xx indicates the result is not present; stop\n           if (result.status >= 400 && result.status < 500) {\n               return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n           }\n\n           // 5xx indicates server issue; try the next url\n           errorMessages.push(errorMessage);\n       }\n\n       return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n           urls, errorMessages\n       });\n   }\n\n   // Fetches the blockNumber, but will reuse any result that is less\n   // than maxAge old or has been requested since the last request\n   async _getInternalBlockNumber(maxAge: number): Promise<number> {\n       await this._ready();\n\n       // Allowing stale data up to maxAge old\n       if (maxAge > 0) {\n\n           // While there are pending internal block requests...\n           while (this._internalBlockNumber) {\n\n               // ...\"remember\" which fetch we started with\n               const internalBlockNumber = this._internalBlockNumber;\n\n               try {\n                   // Check the result is not too stale\n                   const result = await internalBlockNumber;\n                   if ((getTime() - result.respTime) <= maxAge) {\n                       return result.blockNumber;\n                   }\n\n                   // Too old; fetch a new value\n                   break;\n\n               } catch(error) {\n\n                   // The fetch rejected; if we are the first to get the\n                   // rejection, drop through so we replace it with a new\n                   // fetch; all others blocked will then get that fetch\n                   // which won't match the one they \"remembered\" and loop\n                   if (this._internalBlockNumber === internalBlockNumber) {\n                       break;\n                   }\n               }\n           }\n       }\n\n       const reqTime = getTime();\n\n       const checkInternalBlockNumber = resolveProperties({\n           blockNumber: this.perform(\"getBlockNumber\", { }),\n           networkError: this.getNetwork().then((network) => (null), (error) => (error))\n       }).then(({ blockNumber, networkError }) => {\n           if (networkError) {\n               // Unremember this bad internal block number\n               if (this._internalBlockNumber === checkInternalBlockNumber) {\n                   this._internalBlockNumber = null;\n               }\n               throw networkError;\n           }\n\n           const respTime = getTime();\n\n           blockNumber = BigNumber.from(blockNumber).toNumber();\n           if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n           this._maxInternalBlockNumber = blockNumber;\n           this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n           return { blockNumber, reqTime, respTime };\n       });\n\n       this._internalBlockNumber = checkInternalBlockNumber;\n\n       // Swallow unhandled exceptions; if needed they are handled else where\n       checkInternalBlockNumber.catch((error) => {\n           // Don't null the dead (rejected) fetch, if it has already been updated\n           if (this._internalBlockNumber === checkInternalBlockNumber) {\n               this._internalBlockNumber = null;\n           }\n       });\n\n       return (await checkInternalBlockNumber).blockNumber;\n   }\n\n   async poll(): Promise<void> {\n        // Polling is now disabled\n        return;\n       const pollId = nextPollId++;\n\n       // Track all running promises, so we can trigger a post-poll once they are complete\n       const runners: Array<Promise<void>> = [];\n\n       let blockNumber: number = null;\n       try {\n           blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n       } catch (error) {\n           this.emit(\"error\", error);\n           return;\n       }\n       this._setFastBlockNumber(blockNumber);\n\n       // Emit a poll event after we have the latest (fast) block number\n       this.emit(\"poll\", pollId, blockNumber);\n\n       // If the block has not changed, meh.\n       if (blockNumber === this._lastBlockNumber) {\n           this.emit(\"didPoll\", pollId);\n           return;\n       }\n\n       // First polling cycle, trigger a \"block\" events\n       if (this._emitted.block === -2) {\n           this._emitted.block = blockNumber - 1;\n       }\n\n       if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n           logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n           this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n               blockNumber: blockNumber,\n               event: \"blockSkew\",\n               previousBlockNumber: this._emitted.block\n           }));\n           this.emit(\"block\", blockNumber);\n\n       } else {\n           // Notify all listener for each block that has passed\n           for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n               this.emit(\"block\", i);\n           }\n       }\n\n       // The emitted block was updated, check for obsolete events\n       if ((<number>this._emitted.block) !== blockNumber) {\n           this._emitted.block = blockNumber;\n\n           Object.keys(this._emitted).forEach((key) => {\n               // The block event does not expire\n               if (key === \"block\") { return; }\n\n               // The block we were at when we emitted this event\n               const eventBlockNumber = this._emitted[key];\n\n               // We cannot garbage collect pending transactions or blocks here\n               // They should be garbage collected by the Provider when setting\n               // \"pending\" events\n               if (eventBlockNumber === \"pending\") { return; }\n\n               // Evict any transaction hashes or block hashes over 12 blocks\n               // old, since they should not return null anyways\n               if (blockNumber - eventBlockNumber > 12) {\n                   delete this._emitted[key];\n               }\n           });\n       }\n\n       // First polling cycle\n       if (this._lastBlockNumber === -2) {\n           this._lastBlockNumber = blockNumber - 1;\n       }\n       // Find all transaction hashes we are waiting on\n       this._events.forEach((event) => {\n           switch (event.type) {\n               case \"tx\": {\n                   const hash = event.hash;\n                   let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                       if (!receipt || receipt.blockNumber == null) { return null; }\n                       this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                       this.emit(hash, receipt);\n                       return null;\n                   }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                   runners.push(runner);\n\n                   break;\n               }\n\n               case \"filter\": {\n                   // We only allow a single getLogs to be in-flight at a time\n                   if (!event._inflight) {\n                       event._inflight = true;\n\n                       // This is the first filter for this event, so we want to\n                       // restrict events to events that happened no earlier than now\n                       if (event._lastBlockNumber === -2) {\n                           event._lastBlockNumber = blockNumber - 1;\n                       }\n\n                       // Filter from the last *known* event; due to load-balancing\n                       // and some nodes returning updated block numbers before\n                       // indexing events, a logs result with 0 entries cannot be\n                       // trusted and we must retry a range which includes it again\n                       const filter = event.filter;\n                       filter.fromBlock = event._lastBlockNumber + 1;\n                       filter.toBlock = blockNumber;\n\n                       // Prevent fitler ranges from growing too wild, since it is quite\n                       // likely there just haven't been any events to move the lastBlockNumber.\n                       const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                       if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                       if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                       const runner = this.getLogs(filter).then((logs) => {\n                           // Allow the next getLogs\n                           event._inflight = false;\n\n                           if (logs.length === 0) { return; }\n\n                           logs.forEach((log: Log) => {\n                               // Only when we get an event for a given block number\n                               // can we trust the events are indexed\n                               if (log.blockNumber > event._lastBlockNumber) {\n                                   event._lastBlockNumber = log.blockNumber;\n                               }\n\n                               // Make sure we stall requests to fetch blocks and txs\n                               this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                               this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                               this.emit(filter, log);\n                           });\n                       }).catch((error: Error) => {\n                           this.emit(\"error\", error);\n\n                           // Allow another getLogs (the range was not updated)\n                           event._inflight = false;\n                       });\n                       runners.push(runner);\n                   }\n\n                   break;\n               }\n           }\n       });\n\n       this._lastBlockNumber = blockNumber;\n\n       // Once all events for this loop have been processed, emit \"didPoll\"\n       Promise.all(runners).then(() => {\n           this.emit(\"didPoll\", pollId);\n       }).catch((error) => { this.emit(\"error\", error); });\n\n       return;\n   }\n\n   // Deprecated; do not use this\n   resetEventsBlock(blockNumber: number): void {\n       this._lastBlockNumber = blockNumber - 1;\n       if (this.polling) { this.poll(); }\n   }\n\n   get network(): Network {\n       return this._network;\n   }\n\n   // This method should query the network if the underlying network\n   // can change, such as when connected to a JSON-RPC backend\n   async detectNetwork(): Promise<Network> {\n       return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n           operation: \"provider.detectNetwork\"\n       });\n   }\n\n   async getNetwork(): Promise<Network> {\n       const network = await this._ready();\n\n       // Make sure we are still connected to the same network; this is\n       // only an external call for backends which can have the underlying\n       // network change spontaneously\n       const currentNetwork = await this.detectNetwork();\n       if (network.chainId !== currentNetwork.chainId) {\n\n           // We are allowing network changes, things can get complex fast;\n           // make sure you know what you are doing if you use \"any\"\n           if (this.anyNetwork) {\n               this._network = currentNetwork;\n\n               // Reset all internal block number guards and caches\n               this._lastBlockNumber = -2;\n               this._fastBlockNumber = null;\n               this._fastBlockNumberPromise = null;\n               this._fastQueryDate = 0;\n               this._emitted.block = -2;\n               this._maxInternalBlockNumber = -1024;\n               this._internalBlockNumber = null;\n\n               // The \"network\" event MUST happen before this method resolves\n               // so any events have a chance to unregister, so we stall an\n               // additional event loop before returning from /this/ call\n               this.emit(\"network\", currentNetwork, network);\n               await stall(0);\n\n               return this._network;\n           }\n\n           const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n               event: \"changed\",\n               network: network,\n               detectedNetwork: currentNetwork\n           });\n\n           this.emit(\"error\", error);\n           throw error;\n       }\n\n       return network;\n   }\n\n   get blockNumber(): number {\n       this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n           this._setFastBlockNumber(blockNumber);\n       }, (error) => { });\n\n       return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n   }\n\n   get polling(): boolean {\n       return (this._poller != null);\n   }\n\n   set polling(value: boolean) {\n       if (value && !this._poller) {\n           this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n           if (!this._bootstrapPoll) {\n               this._bootstrapPoll = setTimeout(() => {\n                   this.poll();\n\n                   // We block additional polls until the polling interval\n                   // is done, to prevent overwhelming the poll function\n                   this._bootstrapPoll = setTimeout(() => {\n                       // If polling was disabled, something may require a poke\n                       // since starting the bootstrap poll and it was disabled\n                       if (!this._poller) { this.poll(); }\n\n                       // Clear out the bootstrap so we can do another\n                       this._bootstrapPoll = null;\n                   }, this.pollingInterval);\n               }, 0);\n           }\n\n       } else if (!value && this._poller) {\n           clearInterval(this._poller);\n           this._poller = null;\n       }\n   }\n\n   get pollingInterval(): number {\n       return this._pollingInterval;\n   }\n\n   set pollingInterval(value: number) {\n       if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n           throw new Error(\"invalid polling interval\");\n       }\n\n       this._pollingInterval = value;\n\n       if (this._poller) {\n           clearInterval(this._poller);\n           this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n       }\n   }\n\n   _getFastBlockNumber(): Promise<number> {\n       const now = getTime();\n\n       // Stale block number, request a newer value\n       if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n           this._fastQueryDate = now;\n           this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n               if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                   this._fastBlockNumber = blockNumber;\n               }\n               return this._fastBlockNumber;\n           });\n       }\n\n       return this._fastBlockNumberPromise;\n   }\n\n   _setFastBlockNumber(blockNumber: number): void {\n       // Older block, maybe a stale request\n       if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n       // Update the time we updated the blocknumber\n       this._fastQueryDate = getTime();\n\n       // Newer block number, use  it\n       if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n           this._fastBlockNumber = blockNumber;\n           this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n       }\n   }\n\n   async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n       return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n   }\n\n   async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n       const receipt = await this.getTransactionReceipt(transactionHash);\n\n       // Receipt is already good\n       if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n       // Poll until the receipt is good...\n       return new Promise((resolve, reject) => {\n           const cancelFuncs: Array<() => void> = [];\n\n           let done = false;\n           const alreadyDone = function() {\n               if (done) { return true; }\n               done = true;\n               cancelFuncs.forEach((func) => { func(); });\n               return false;\n           };\n\n           const minedHandler = (receipt: TransactionReceipt) => {\n               if (receipt.confirmations < confirmations) { return; }\n               if (alreadyDone()) { return; }\n               resolve(receipt);\n           }\n           this.on(transactionHash, minedHandler);\n           cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n           if (replaceable) {\n               let lastBlockNumber = replaceable.startBlock;\n               let scannedBlock: number = null;\n               const replaceHandler = async (blockNumber: number) => {\n                   if (done) { return; }\n\n                   // Wait 1 second; this is only used in the case of a fault, so\n                   // we will trade off a little bit of latency for more consistent\n                   // results and fewer JSON-RPC calls\n                   await stall(1000);\n\n                   this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                       if (done) { return; }\n\n                       if (nonce <= replaceable.nonce) {\n                           lastBlockNumber = blockNumber;\n\n                       } else {\n                           // First check if the transaction was mined\n                           {\n                               const mined = await this.getTransaction(transactionHash);\n                               if (mined && mined.blockNumber != null) { return; }\n                           }\n\n                           // First time scanning. We start a little earlier for some\n                           // wiggle room here to handle the eventually consistent nature\n                           // of blockchain (e.g. the getTransactionCount was for a\n                           // different block)\n                           if (scannedBlock == null) {\n                               scannedBlock = lastBlockNumber - 3;\n                               if (scannedBlock < replaceable.startBlock) {\n                                   scannedBlock = replaceable.startBlock;\n                               }\n                           }\n\n                           while (scannedBlock <= blockNumber) {\n                               if (done) { return; }\n\n                               const block = await this.getBlockWithTransactions(scannedBlock);\n                               for (let ti = 0; ti < block.transactions.length; ti++) {\n                                   const tx = block.transactions[ti];\n\n                                   // Successfully mined!\n                                   if (tx.hash === transactionHash) { return; }\n\n                                   // Matches our transaction from and nonce; its a replacement\n                                   if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                       if (done) { return; }\n\n                                       // Get the receipt of the replacement\n                                       const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                       // Already resolved or rejected (prolly a timeout)\n                                       if (alreadyDone()) { return; }\n\n                                       // The reason we were replaced\n                                       let reason = \"replaced\";\n                                       if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                           reason = \"repriced\";\n                                       } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                           reason = \"cancelled\"\n                                       }\n\n                                       // Explain why we were replaced\n                                       reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                           cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                           reason,\n                                           replacement: this._wrapTransaction(tx),\n                                           hash: transactionHash,\n                                           receipt\n                                       }));\n\n                                       return;\n                                   }\n                               }\n                               scannedBlock++;\n                           }\n                       }\n\n                       if (done) { return; }\n                       this.once(\"block\", replaceHandler);\n\n                   }, (error) => {\n                       if (done) { return; }\n                       this.once(\"block\", replaceHandler);\n                   });\n               };\n\n               if (done) { return; }\n               this.once(\"block\", replaceHandler);\n\n               cancelFuncs.push(() => {\n                   this.removeListener(\"block\", replaceHandler);\n               });\n           }\n\n           if (typeof(timeout) === \"number\" && timeout > 0) {\n               const timer = setTimeout(() => {\n                   if (alreadyDone()) { return; }\n                   reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n               }, timeout);\n               if (timer.unref) { timer.unref(); }\n\n               cancelFuncs.push(() => { clearTimeout(timer); });\n           }\n       });\n   }\n\n   async getBlockNumber(): Promise<number> {\n       return this._getInternalBlockNumber(0);\n   }\n\n   async getGasPrice(): Promise<BigNumber> {\n       await this.getNetwork();\n\n       const result = await this.perform(\"getGasPrice\", { });\n       try {\n           return BigNumber.from(result);\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"getGasPrice\",\n               result, error\n           });\n       }\n   }\n\n   async getMaxPriorityFeePerGas(): Promise<BigNumber> {\n       await this.getNetwork();\n\n       const result = await this.perform(\"getMaxPriorityFeePerGas\", { });\n       try {\n           return BigNumber.from(result);\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"getMaxPriorityFeePerGas\",\n               result, error\n           });\n       }\n   }\n\n   async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n       await this.getNetwork();\n       const params = await resolveProperties({\n           address: this._getAddress(addressOrName),\n           blockTag: this._getBlockTag(blockTag)\n       });\n\n       const result = await this.perform(\"getBalance\", params);\n       try {\n           return BigNumber.from(result);\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"getBalance\",\n               params, result, error\n           });\n       }\n   }\n\n   async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n       await this.getNetwork();\n       const params = await resolveProperties({\n           address: this._getAddress(addressOrName),\n           blockTag: this._getBlockTag(blockTag)\n       });\n\n       const result = await this.perform(\"getTransactionCount\", params);\n       try {\n           return BigNumber.from(result).toNumber();\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"getTransactionCount\",\n               params, result, error\n           });\n       }\n   }\n\n   async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n       await this.getNetwork();\n       const params = await resolveProperties({\n           address: this._getAddress(addressOrName),\n           blockTag: this._getBlockTag(blockTag)\n       });\n\n       const result = await this.perform(\"getCode\", params);\n       try {\n           return hexlify(result);\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"getCode\",\n               params, result, error\n           });\n       }\n   }\n\n   async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n       await this.getNetwork();\n       const params = await resolveProperties({\n           address: this._getAddress(addressOrName),\n           blockTag: this._getBlockTag(blockTag),\n           position: Promise.resolve(position).then((p) => hexValue(p))\n       });\n       const result = await this.perform(\"getStorageAt\", params);\n       try {\n           return hexlify(result);\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"getStorageAt\",\n               params, result, error\n           });\n       }\n   }\n\n   // This should be called by any subclass wrapping a TransactionResponse\n   _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n       if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n       const result = <TransactionResponse>tx;\n\n       // Check the hash we expect is the same as the hash the server reported\n       if (hash != null && tx.hash !== hash) {\n           logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n       }\n\n       result.wait = async (confirms?: number, timeout?: number) => {\n           if (confirms == null) { confirms = 1; }\n           if (timeout == null) { timeout = 0; }\n\n           // Get the details to detect replacement\n           let replacement = undefined;\n           if (confirms !== 0 && startBlock != null) {\n               replacement = {\n                   data: tx.data,\n                   from: tx.from,\n                   nonce: tx.nonce,\n                   to: tx.to,\n                   value: tx.value,\n                   startBlock\n               };\n           }\n\n           const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n           if (receipt == null && confirms === 0) { return null; }\n\n           // No longer pending, allow the polling loop to garbage collect this\n           this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n           if (receipt.status === 0) {\n               logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                   transactionHash: tx.hash,\n                   transaction: tx,\n                   receipt: receipt\n               });\n           }\n           return receipt;\n       };\n\n       return result;\n   }\n\n   async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n       await this.getNetwork();\n       const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n       const tx = this.formatter.transaction(signedTransaction);\n       if (tx.confirmations == null) { tx.confirmations = 0; }\n       const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n       try {\n           const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n           return this._wrapTransaction(tx, hash, blockNumber);\n       } catch (error) {\n           (<any>error).transaction = tx;\n           (<any>error).transactionHash = tx.hash;\n           throw error;\n       }\n   }\n\n   async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n       const values: any = await transaction;\n\n       const tx: any = { };\n\n       [\"from\", \"to\"].forEach((key) => {\n           if (values[key] == null) { return; }\n           tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n       });\n\n       [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n           if (values[key] == null) { return; }\n           tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n       });\n\n       [\"type\"].forEach((key) => {\n           if (values[key] == null) { return; }\n           tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n       });\n\n       if (values.accessList) {\n           tx.accessList = this.formatter.accessList(values.accessList);\n       }\n\n       [\"data\"].forEach((key) => {\n           if (values[key] == null) { return; }\n           tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n       });\n\n       return this.formatter.transactionRequest(await resolveProperties(tx));\n   }\n\n   async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n       filter = await filter;\n\n       const result: any = { };\n\n       if (filter.address != null) {\n           result.address = this._getAddress(filter.address);\n       }\n\n       [\"blockHash\", \"topics\"].forEach((key) => {\n           if ((<any>filter)[key] == null) { return; }\n           result[key] = (<any>filter)[key];\n       });\n\n       [\"fromBlock\", \"toBlock\"].forEach((key) => {\n           if ((<any>filter)[key] == null) { return; }\n           result[key] = this._getBlockTag((<any>filter)[key]);\n       });\n\n       return this.formatter.filter(await resolveProperties(result));\n   }\n\n   async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n       if (attempt >= MAX_CCIP_REDIRECTS) {\n           logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n               redirects: attempt, transaction\n           });\n       }\n\n       const txSender = transaction.to;\n\n       const result = await this.perform(\"call\", { transaction, blockTag });\n\n       // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n       if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n           try {\n               const data = hexDataSlice(result, 4);\n\n               // Check the sender of the OffchainLookup matches the transaction\n               const sender = hexDataSlice(data, 0, 32);\n               if (!BigNumber.from(sender).eq(txSender)) {\n                   logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                       name: \"OffchainLookup\",\n                       signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                       transaction, data: result\n                   });\n               }\n\n               // Read the URLs from the response\n               const urls: Array<string> = [];\n               const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n               const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n               const urlsData = hexDataSlice(data, urlsOffset + 32);\n               for (let u = 0; u < urlsLength; u++) {\n                   const url = _parseString(urlsData, u * 32);\n                   if (url == null) {\n                       logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                           name: \"OffchainLookup\",\n                           signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                           transaction, data: result\n                       });\n                   }\n                   urls.push(url);\n               }\n\n               // Get the CCIP calldata to forward\n               const calldata = _parseBytes(data, 64);\n\n               // Get the callbackSelector (bytes4)\n               if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                   logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                       name: \"OffchainLookup\",\n                       signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                       transaction, data: result\n                   });\n               }\n               const callbackSelector = hexDataSlice(data, 96, 100);\n\n               // Get the extra data to send back to the contract as context\n               const extraData = _parseBytes(data, 128);\n\n               const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n               if (ccipResult == null) {\n                   logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                       name: \"OffchainLookup\",\n                       signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                       transaction, data: result\n                   });\n               }\n\n               const tx = {\n                   to: txSender,\n                   data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n               };\n\n               return this._call(tx, blockTag, attempt + 1);\n\n           } catch (error) {\n               if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n           }\n       }\n\n       try {\n           return hexlify(result);\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"call\",\n               params: { transaction, blockTag }, result, error\n           });\n       }\n\n   }\n\n   async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n       await this.getNetwork();\n       const resolved = await resolveProperties({\n           transaction: this._getTransactionRequest(transaction),\n           blockTag: this._getBlockTag(blockTag),\n           ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n       });\n       return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n   }\n\n   async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n       await this.getNetwork();\n       const params = await resolveProperties({\n           transaction: this._getTransactionRequest(transaction)\n       });\n\n       const result = await this.perform(\"estimateGas\", params);\n       try {\n           return BigNumber.from(result);\n       } catch (error) {\n           return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n               method: \"estimateGas\",\n               params, result, error\n           });\n       }\n   }\n\n   async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n       addressOrName = await addressOrName;\n       if (typeof(addressOrName) !== \"string\") {\n           logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n       }\n\n       const address = await this.resolveName(addressOrName);\n       if (address == null) {\n           logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n               operation: `resolveName(${ JSON.stringify(addressOrName) })`\n           });\n       }\n       return address;\n   }\n\n   async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean, simplify?: boolean): Promise<Block | BlockWithTransactions> {\n       await this.getNetwork();\n\n       blockHashOrBlockTag = await blockHashOrBlockTag;\n\n       // If blockTag is a number (not \"latest\", etc), this is the block number\n       let blockNumber = -128;\n\n       const params: { [key: string]: any } = {\n           includeTransactions: !!includeTransactions,\n           simplify:  !!simplify\n       };\n\n       if (isHexString(blockHashOrBlockTag, 32)) {\n           params.blockHash = blockHashOrBlockTag;\n       } else {\n           try {\n               params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n               if (isHexString(params.blockTag)) {\n                   blockNumber = parseInt(params.blockTag.substring(2), 16);\n               }\n           } catch (error) {\n               logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n           }\n       }\n\n       return poll(async () => {\n           const block = await this.perform(\"getBlock\", params);\n\n           // Block was not found\n           if (block == null) {\n\n               // For blockhashes, if we didn't say it existed, that blockhash may\n               // not exist. If we did see it though, perhaps from a log, we know\n               // it exists, and this node is just not caught up yet.\n               if (params.blockHash != null) {\n                   if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n               }\n\n               // For block tags, if we are asking for a future block, we return null\n               if (params.blockTag != null) {\n                   if (blockNumber > Number(this._emitted.block)) { return null; }\n               }\n\n               // Retry on the next block\n               return undefined;\n           }\n\n           // Add transactions\n           if (includeTransactions) {\n               let blockNumber: number = null;\n               for (let i = 0; i < block.transactions.length; i++) {\n                   const tx = block.transactions[i];\n                   if (tx.blockNumber == null) {\n                       tx.confirmations = 0;\n\n                   } else if (tx.confirmations == null) {\n                       if (blockNumber == null) {\n                           blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                       }\n\n                       // Add the confirmations using the fast block number (pessimistic)\n                       let confirmations = (blockNumber - tx.blockNumber) + 1;\n                       if (confirmations <= 0) { confirmations = 1; }\n                       tx.confirmations = confirmations;\n                   }\n               }\n\n               const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n               blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n               return blockWithTxs;\n           }\n           return this.formatter.block(block, simplify);\n\n       }, { oncePoll: this });\n   }\n\n   getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, simplify: boolean = false): Promise<Block> {\n       return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false, simplify));\n   }\n\n   getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, simplify: boolean = false): Promise<BlockWithTransactions> {\n       return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true, simplify));\n   }\n\n   async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n       await this.getNetwork();\n       transactionHash = await transactionHash;\n\n       const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n       return poll(async () => {\n           const result = await this.perform(\"getTransaction\", params);\n\n           if (result == null) {\n               if (this._emitted[\"t:\" + transactionHash] == null) {\n                   return null;\n               }\n               return undefined;\n           }\n\n           const tx = this.formatter.transactionResponse(result);\n\n           if (tx.blockNumber == null) {\n               tx.confirmations = 0;\n\n           } else if (tx.confirmations == null) {\n               const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n               // Add the confirmations using the fast block number (pessimistic)\n               let confirmations = (blockNumber - tx.blockNumber) + 1;\n               if (confirmations <= 0) { confirmations = 1; }\n               tx.confirmations = confirmations;\n           }\n\n           return this._wrapTransaction(tx);\n       }, { oncePoll: this });\n   }\n\n   async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n       await this.getNetwork();\n\n       transactionHash = await transactionHash;\n\n       const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n       return poll(async () => {\n           const result = await this.perform(\"getTransactionReceipt\", params);\n\n           if (result == null) {\n               if (this._emitted[\"t:\" + transactionHash] == null) {\n                   return null;\n               }\n               return undefined;\n           }\n\n           // \"geth-etc\" returns receipts before they are ready\n           if (result.blockHash == null) { return undefined; }\n\n           const receipt = this.formatter.receipt(result);\n\n           if (receipt.blockNumber == null) {\n               receipt.confirmations = 0;\n\n           } else if (receipt.confirmations == null) {\n               const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n               // Add the confirmations using the fast block number (pessimistic)\n               let confirmations = (blockNumber - receipt.blockNumber) + 1;\n               if (confirmations <= 0) { confirmations = 1; }\n               receipt.confirmations = confirmations;\n           }\n\n           return receipt;\n       }, { oncePoll: this });\n   }\n\n   async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n       await this.getNetwork();\n       const params = await resolveProperties({ filter: this._getFilter(filter) });\n       const logs: Array<Log> = await this.perform(\"getLogs\", params);\n       logs.forEach((log) => {\n           if (log.removed == null) { log.removed = false; }\n       });\n       return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n   }\n\n   async getEtherPrice(): Promise<number> {\n       await this.getNetwork();\n       return this.perform(\"getEtherPrice\", { });\n   }\n\n   async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n       blockTag = await blockTag;\n\n       if (typeof(blockTag) === \"number\" && blockTag < 0) {\n           if (blockTag % 1) {\n               logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n           }\n\n           let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n           blockNumber += blockTag;\n           if (blockNumber < 0) { blockNumber = 0; }\n           return this.formatter.blockTag(blockNumber)\n       }\n\n       return this.formatter.blockTag(blockTag);\n   }\n\n\n   async getResolver(name: string): Promise<null | Resolver> {\n       let currentName = name;\n       while (true) {\n           if (currentName === \"\" || currentName === \".\") { return null; }\n\n           // Optimization since the eth node cannot change and does\n           // not have a wildcard resolver\n           if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n           // Check the current node for a resolver\n           const addr = await this._getResolver(currentName, \"getResolver\");\n\n           // Found a resolver!\n           if (addr != null) {\n               const resolver = new Resolver(this, addr, name);\n\n               // Legacy resolver found, using EIP-2544 so it isn't safe to use\n               if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n               return resolver;\n           }\n\n           // Get the parent node\n           currentName = currentName.split(\".\").slice(1).join(\".\");\n       }\n\n   }\n\n   async _getResolver(name: string, operation?: string): Promise<string> {\n       if (operation == null) { operation = \"ENS\"; }\n\n       const network = await this.getNetwork();\n\n       // No ENS...\n       if (!network.ensAddress) {\n           logger.throwError(\n               \"network does not support ENS\",\n               Logger.errors.UNSUPPORTED_OPERATION,\n               { operation, network: network.name }\n           );\n       }\n\n       try {\n           // keccak256(\"resolver(bytes32)\")\n           const addrData = await this.call({\n               to: network.ensAddress,\n               data: (\"0x0178b8bf\" + namehash(name).substring(2))\n           });\n           return this.formatter.callAddress(addrData);\n       } catch (error) {\n           // ENS registry cannot throw errors on resolver(bytes32)\n       }\n\n       return null;\n   }\n\n   async resolveName(name: string | Promise<string>): Promise<null | string> {\n       name = await name;\n\n       // If it is already an address, nothing to resolve\n       try {\n           return Promise.resolve(this.formatter.address(name));\n       } catch (error) {\n           // If is is a hexstring, the address is bad (See #694)\n           if (isHexString(name)) { throw error; }\n       }\n\n       if (typeof(name) !== \"string\") {\n           logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n       }\n\n       // Get the addr from the resolver\n       const resolver = await this.getResolver(name);\n       if (!resolver) { return null; }\n\n       return await resolver.getAddress();\n   }\n\n   async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n       address = await address;\n       address = this.formatter.address(address);\n\n       const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n       const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n       if (resolverAddr == null) { return null; }\n\n       // keccak(\"name(bytes32)\")\n       const name = _parseString(await this.call({\n           to: resolverAddr,\n           data: (\"0x691f3431\" + namehash(node).substring(2))\n       }), 0);\n\n       const addr = await this.resolveName(name);\n       if (addr != address) { return null; }\n\n       return name;\n   }\n\n   async getAvatar(nameOrAddress: string): Promise<null | string> {\n       let resolver: Resolver = null;\n       if (isHexString(nameOrAddress)) {\n           // Address; reverse lookup\n           const address = this.formatter.address(nameOrAddress);\n\n           const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n           const resolverAddress = await this._getResolver(node, \"getAvatar\");\n           if (!resolverAddress) { return null; }\n\n           // Try resolving the avatar against the addr.reverse resolver\n           resolver = new Resolver(this, resolverAddress, node);\n           try {\n               const avatar = await resolver.getAvatar();\n               if (avatar) { return avatar.url; }\n           } catch (error) {\n               if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n           }\n\n           // Try getting the name and performing forward lookup; allowing wildcards\n           try {\n               // keccak(\"name(bytes32)\")\n               const name = _parseString(await this.call({\n                   to: resolverAddress,\n                   data: (\"0x691f3431\" + namehash(node).substring(2))\n               }), 0);\n               resolver = await this.getResolver(name);\n           } catch (error) {\n               if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n               return null;\n           }\n\n       } else {\n           // ENS name; forward lookup with wildcard\n           resolver = await this.getResolver(nameOrAddress);\n           if (!resolver) { return null; }\n       }\n\n       const avatar = await resolver.getAvatar();\n       if (avatar == null) { return null; }\n\n       return avatar.url;\n   }\n\n   perform(method: string, params: any): Promise<any> {\n       return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n   }\n\n   _startEvent(event: Event): void {\n       this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n   }\n\n   _stopEvent(event: Event): void {\n       this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n   }\n\n   _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n       const event = new Event(getEventTag(eventName), listener, once)\n       this._events.push(event);\n       this._startEvent(event);\n\n       return this;\n   }\n\n   on(eventName: EventType, listener: Listener): this {\n       return this._addEventListener(eventName, listener, false);\n   }\n\n   once(eventName: EventType, listener: Listener): this {\n       return this._addEventListener(eventName, listener, true);\n   }\n\n\n   emit(eventName: EventType, ...args: Array<any>): boolean {\n       let result = false;\n\n       let stopped: Array<Event> = [ ];\n\n       let eventTag = getEventTag(eventName);\n       this._events = this._events.filter((event) => {\n           if (event.tag !== eventTag) { return true; }\n\n           setTimeout(() => {\n               event.listener.apply(this, args);\n           }, 0);\n\n           result = true;\n\n           if (event.once) {\n               stopped.push(event);\n               return false;\n           }\n\n           return true;\n       });\n\n       stopped.forEach((event) => { this._stopEvent(event); });\n\n       return result;\n   }\n\n   listenerCount(eventName?: EventType): number {\n       if (!eventName) { return this._events.length; }\n\n       let eventTag = getEventTag(eventName);\n       return this._events.filter((event) => {\n           return (event.tag === eventTag);\n       }).length;\n   }\n\n   listeners(eventName?: EventType): Array<Listener> {\n       if (eventName == null) {\n           return this._events.map((event) => event.listener);\n       }\n\n       let eventTag = getEventTag(eventName);\n       return this._events\n           .filter((event) => (event.tag === eventTag))\n           .map((event) => event.listener);\n   }\n\n   off(eventName: EventType, listener?: Listener): this {\n       if (listener == null) {\n           return this.removeAllListeners(eventName);\n       }\n\n       const stopped: Array<Event> = [ ];\n\n       let found = false;\n\n       let eventTag = getEventTag(eventName);\n       this._events = this._events.filter((event) => {\n           if (event.tag !== eventTag || event.listener != listener) { return true; }\n           if (found) { return true; }\n           found = true;\n           stopped.push(event);\n           return false;\n       });\n\n       stopped.forEach((event) => { this._stopEvent(event); });\n\n       return this;\n   }\n\n   removeAllListeners(eventName?: EventType): this {\n       let stopped: Array<Event> = [ ];\n       if (eventName == null) {\n           stopped = this._events;\n\n           this._events = [ ];\n       } else {\n           const eventTag = getEventTag(eventName);\n           this._events = this._events.filter((event) => {\n               if (event.tag !== eventTag) { return true; }\n               stopped.push(event);\n               return false;\n           });\n       }\n\n       stopped.forEach((event) => { this._stopEvent(event); });\n\n       return this;\n   }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}