{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapString = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst string_width_1 = __importDefault(require(\"string-width\"));\n/**\n * Creates an array of strings split into groups the length of size.\n * This function works with strings that contain ASCII characters.\n *\n * wrapText is different from would-be \"chunk\" implementation\n * in that whitespace characters that occur on a chunk size limit are trimmed.\n *\n */\nconst wrapString = (subject, size) => {\n  let subjectSlice = subject;\n  const chunks = [];\n  do {\n    chunks.push((0, slice_ansi_1.default)(subjectSlice, 0, size));\n    subjectSlice = (0, slice_ansi_1.default)(subjectSlice, size).trim();\n  } while ((0, string_width_1.default)(subjectSlice));\n  return chunks;\n};\nexports.wrapString = wrapString;","map":{"version":3,"names":["slice_ansi_1","__importDefault","require","string_width_1","wrapString","subject","size","subjectSlice","chunks","push","default","trim","exports"],"sources":["../../src/wrapString.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA,MAAAA,YAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,cAAA,GAAAF,eAAA,CAAAC,OAAA;AAEA;;;;;;;;AAQO,MAAME,UAAU,GAAGA,CAACC,OAAe,EAAEC,IAAY,KAAc;EACpE,IAAIC,YAAY,GAAGF,OAAO;EAE1B,MAAMG,MAAM,GAAa,EAAE;EAE3B,GAAG;IACDA,MAAM,CAACC,IAAI,CAAC,IAAAT,YAAA,CAAAU,OAAK,EAACH,YAAY,EAAE,CAAC,EAAED,IAAI,CAAC,CAAC;IAEzCC,YAAY,GAAG,IAAAP,YAAA,CAAAU,OAAK,EAACH,YAAY,EAAED,IAAI,CAAC,CAACK,IAAI,EAAE;GAChD,QAAQ,IAAAR,cAAA,CAAAO,OAAW,EAACH,YAAY,CAAC;EAElC,OAAOC,MAAM;AACf,CAAC;AAZYI,OAAA,CAAAR,UAAU,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}